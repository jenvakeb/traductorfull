/* The following code was generated by JFlex 1.5.0-SNAPSHOT */


/* --------------------------Codigo de Usuario----------------------- */
package ejemplocup;

import java_cup.runtime.*;
import java.io.Reader;
      

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>alexico.flex</tt>
 */
class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\46\1\47\1\1\22\0\1\37\1\40\6\0"+
    "\1\40\1\40\1\40\1\52\1\40\1\43\1\41\1\40\1\4\11\5"+
    "\1\40\1\40\3\0\1\51\1\0\1\6\1\27\1\13\1\15\1\12"+
    "\1\33\1\30\1\11\1\14\1\34\1\25\1\22\1\23\1\7\1\26"+
    "\1\21\1\50\1\20\1\16\1\10\1\24\1\36\1\17\1\32\1\31"+
    "\1\35\1\42\1\0\1\40\25\0\1\45\7\0\1\40\1\44\1\40"+
    "\7\0\1\46\u1fa2\0\1\46\1\46\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\3\1\4\5\1\1\5\21\1"+
    "\3\6\1\7\1\10\1\4\1\11\3\0\1\12\4\0"+
    "\1\13\17\0\1\14\1\0\1\15\26\0\1\16\1\15"+
    "\1\0\1\13\6\0\1\17\22\0\1\15\27\0\1\15"+
    "\3\0\1\5\1\0\1\15\1\0\1\14\5\0\1\16"+
    "\4\0\1\20\4\0\1\21\1\16\2\0\1\22\5\0"+
    "\1\16\5\0\1\22\23\0\1\21\1\0\1\23\1\0"+
    "\1\24\14\0\1\13\21\0\1\25\3\0\1\26\1\0"+
    "\1\27\3\0\1\30\3\0\1\31\2\0\1\31\10\0"+
    "\1\32\1\0\1\33\1\34\2\0\1\15\1\0\1\22"+
    "\1\24\1\35\2\0\1\15\3\0\1\22\1\36\4\0"+
    "\1\22\14\0\1\21\23\0\1\24\15\0\1\35\13\0"+
    "\1\37\5\0\1\40\10\0\1\41\14\0\1\15\5\0"+
    "\1\22\1\0\1\22\5\0\1\22\1\31\23\0\1\42"+
    "\4\0\2\36\5\0\1\24\10\0\1\22\12\0\1\43"+
    "\3\0\1\21\14\0\1\22\22\0\1\24\15\0\1\44"+
    "\10\0\1\31\11\0\1\5\2\0\1\14\5\0\1\22"+
    "\1\21\5\0\1\24\10\0\1\45\27\0\1\15\22\0"+
    "\1\16\53\0\1\11\3\0\1\31\4\0\1\46\1\47"+
    "\1\50\2\0\2\15\3\0\1\32\10\0\1\22\1\51"+
    "\24\0\1\52\2\0\1\22\5\0\1\24\25\0\1\21"+
    "\1\24\14\0\1\53\16\0\1\17\1\0\1\14\16\0"+
    "\1\22\16\0\1\22\15\0\1\42\1\16\1\54\27\0"+
    "\1\32\1\0\1\22\15\0\1\5\2\0\1\26\5\0"+
    "\1\22\15\0\1\11\1\22\3\0\1\43\10\0\1\32"+
    "\15\0\1\22\17\0\1\5\1\0\1\32\1\0\1\21"+
    "\11\0\1\31\16\0\1\46\5\0\1\24\12\0\1\55"+
    "\3\0\1\56\7\0\1\35\23\0\1\31\6\0\1\22"+
    "\7\0\1\21\27\0\1\53\1\32\13\0\1\12\1\0"+
    "\1\31\3\0\1\22\27\0\1\22\65\0\1\5\107\0"+
    "\1\57\37\0\1\60\10\0\1\32\27\0\1\24\33\0"+
    "\1\45\10\0\1\52\3\0\1\31\31\0\1\20\2\0"+
    "\1\12\75\0\1\23\3\0\1\61\1\0\1\26\1\43"+
    "\6\0\1\20\22\0\1\60\16\0\1\20\30\0\1\23"+
    "\11\0\1\23\3\0\1\23";

  private static int [] zzUnpackAction() {
    int [] result = new int[1454];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\53\0\53\0\201\0\254\0\327"+
    "\0\u0102\0\u012d\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f"+
    "\0\u025a\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387"+
    "\0\u03b2\0\u03dd\0\u0408\0\u0433\0\u045e\0\u0489\0\53\0\u04b4"+
    "\0\u04df\0\53\0\53\0\u050a\0\u0535\0\u0560\0\u058b\0\u05b6"+
    "\0\u05e1\0\u060c\0\u0637\0\u0662\0\u068d\0\u06b8\0\u06e3\0\u070e"+
    "\0\u0739\0\u0764\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b\0\u0866"+
    "\0\u0891\0\u08bc\0\u08e7\0\u0912\0\u093d\0\u0968\0\u0993\0\u09be"+
    "\0\u09e9\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0\0\u0aeb\0\u0b16"+
    "\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed\0\u0c18\0\u0c43\0\u0c6e"+
    "\0\u0c99\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45\0\u0d70\0\u0d9b\0\u0dc6"+
    "\0\u0df1\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d\0\u0ec8\0\u0ef3\0\u0f1e"+
    "\0\u0f49\0\u0f74\0\u0f9f\0\u0fca\0\u0ff5\0\u1020\0\u104b\0\u1076"+
    "\0\u10a1\0\u10cc\0\u10f7\0\u1122\0\u114d\0\u1178\0\u11a3\0\u11ce"+
    "\0\u11f9\0\u1224\0\u124f\0\u127a\0\u12a5\0\u12d0\0\u12fb\0\u1326"+
    "\0\u1351\0\u137c\0\u13a7\0\u13d2\0\u13fd\0\u1428\0\u1453\0\u147e"+
    "\0\u14a9\0\u14d4\0\u14ff\0\u152a\0\u1555\0\u1580\0\u15ab\0\u15d6"+
    "\0\u1601\0\u162c\0\u1657\0\u1682\0\u16ad\0\u16d8\0\u1703\0\u172e"+
    "\0\u1759\0\u1784\0\u17af\0\u17da\0\u1805\0\u1830\0\u185b\0\u1886"+
    "\0\u18b1\0\u18dc\0\u1907\0\u1932\0\u195d\0\u1988\0\u19b3\0\u19de"+
    "\0\u1a09\0\u1a34\0\u1a5f\0\53\0\u1a8a\0\u1ab5\0\u1ae0\0\u1b0b"+
    "\0\u1b36\0\u1b61\0\u1b8c\0\u1bb7\0\u1be2\0\53\0\u1c0d\0\u1c38"+
    "\0\u1c63\0\u1c8e\0\u1cb9\0\u1ce4\0\u1d0f\0\u1d3a\0\u1d65\0\u1d90"+
    "\0\u1dbb\0\u1de6\0\u1e11\0\u1e3c\0\u1e67\0\u1e92\0\u1ebd\0\u1ee8"+
    "\0\u1f13\0\u1f3e\0\u1f69\0\u1f94\0\u1fbf\0\u1fea\0\u2015\0\u2040"+
    "\0\u206b\0\53\0\u2096\0\53\0\u20c1\0\u20ec\0\u2117\0\u2142"+
    "\0\u216d\0\u2198\0\u21c3\0\u21ee\0\u2219\0\u2244\0\u226f\0\u229a"+
    "\0\53\0\u22c5\0\u22f0\0\u231b\0\u2346\0\u2371\0\u239c\0\u23c7"+
    "\0\u23f2\0\u241d\0\u2448\0\u2473\0\u249e\0\u24c9\0\u24f4\0\u251f"+
    "\0\u254a\0\u2575\0\53\0\u25a0\0\u25cb\0\u25f6\0\53\0\u2621"+
    "\0\u264c\0\u2677\0\u26a2\0\u26cd\0\u26f8\0\u2723\0\u274e\0\u2779"+
    "\0\u27a4\0\u27cf\0\u27fa\0\53\0\u2825\0\u2850\0\u287b\0\u28a6"+
    "\0\u28d1\0\u28fc\0\u2927\0\u2952\0\53\0\u297d\0\53\0\53"+
    "\0\u29a8\0\u29d3\0\u29fe\0\u2a29\0\u2a54\0\u2a7f\0\53\0\u2aaa"+
    "\0\u2ad5\0\u172e\0\u2b00\0\u2b2b\0\u2b56\0\53\0\u2b81\0\u2bac"+
    "\0\u2bd7\0\u2c02\0\u2c2d\0\u2c58\0\u2c83\0\u2cae\0\u2cd9\0\u2d04"+
    "\0\u2d2f\0\u2d5a\0\u2d85\0\u2db0\0\u2ddb\0\u2e06\0\u2e31\0\u2e5c"+
    "\0\u2e87\0\u2eb2\0\u2edd\0\u2f08\0\u2f33\0\u2f5e\0\u2f89\0\u2fb4"+
    "\0\u2fdf\0\u300a\0\u3035\0\u3060\0\u308b\0\u30b6\0\u30e1\0\u310c"+
    "\0\u3137\0\u3162\0\u318d\0\u31b8\0\u31e3\0\u320e\0\u3239\0\u3264"+
    "\0\u328f\0\u32ba\0\u32e5\0\u3310\0\u333b\0\u3366\0\u3391\0\u33bc"+
    "\0\u33e7\0\u3412\0\u343d\0\u3468\0\u3493\0\u34be\0\u34e9\0\u3514"+
    "\0\u353f\0\u356a\0\u3595\0\u35c0\0\u35eb\0\u3616\0\53\0\u3641"+
    "\0\u366c\0\u3697\0\u36c2\0\u36ed\0\53\0\u3718\0\u3743\0\u376e"+
    "\0\u3799\0\u37c4\0\u37ef\0\u381a\0\u3845\0\53\0\u3870\0\u389b"+
    "\0\u38c6\0\u38f1\0\u391c\0\u3947\0\u3972\0\u399d\0\u39c8\0\u39f3"+
    "\0\u3a1e\0\u3a49\0\u3a74\0\u3a9f\0\u3aca\0\u3af5\0\u3b20\0\u3b4b"+
    "\0\u3b76\0\u3ba1\0\u3bcc\0\u3bf7\0\u3c22\0\u3c4d\0\u3c78\0\u3ca3"+
    "\0\u3cce\0\u3cf9\0\u3d24\0\u3d4f\0\u3d7a\0\u3da5\0\u3dd0\0\u3dfb"+
    "\0\u3e26\0\u3e51\0\u3e7c\0\u3ea7\0\u3ed2\0\u3efd\0\u3f28\0\u3f53"+
    "\0\u3f7e\0\u3fa9\0\u3fd4\0\u3fff\0\u402a\0\u4055\0\u4080\0\u40ab"+
    "\0\u40d6\0\u4101\0\u412c\0\53\0\u4157\0\u4182\0\u41ad\0\u41d8"+
    "\0\u4203\0\u422e\0\u4259\0\u4284\0\u42af\0\u42da\0\u4305\0\u4330"+
    "\0\u435b\0\u2a7f\0\u4386\0\u43b1\0\u0535\0\u43dc\0\u4407\0\u4432"+
    "\0\u445d\0\u4488\0\u44b3\0\u44de\0\u4509\0\53\0\u4534\0\u455f"+
    "\0\u458a\0\u45b5\0\u45e0\0\u460b\0\u4636\0\u4661\0\u468c\0\u46b7"+
    "\0\u46e2\0\u470d\0\u4738\0\u4763\0\u478e\0\u47b9\0\u47e4\0\u480f"+
    "\0\u483a\0\u4865\0\u4890\0\u48bb\0\u48e6\0\u4911\0\u493c\0\u4967"+
    "\0\u4992\0\u49bd\0\u49e8\0\u4a13\0\u4a3e\0\u4a69\0\u4a94\0\u4abf"+
    "\0\u4aea\0\u4b15\0\u4b40\0\u4b6b\0\u4b96\0\u4bc1\0\u4bec\0\u4c17"+
    "\0\u4c42\0\u4c6d\0\u4c98\0\u4cc3\0\u343d\0\u4cee\0\u4d19\0\53"+
    "\0\u4d44\0\u4d6f\0\u4d9a\0\u4dc5\0\u4df0\0\u4e1b\0\u4e46\0\u4e71"+
    "\0\u4e9c\0\u4ec7\0\u4ef2\0\u4f1d\0\u4f48\0\u4f73\0\u4f9e\0\u4fc9"+
    "\0\u4ff4\0\u501f\0\u504a\0\u5075\0\u50a0\0\u50cb\0\u50f6\0\u5121"+
    "\0\u514c\0\u5177\0\u51a2\0\u51cd\0\u51f8\0\u5223\0\u524e\0\u5279"+
    "\0\u52a4\0\u52cf\0\u52fa\0\u5325\0\u5350\0\u537b\0\u53a6\0\u53d1"+
    "\0\u53fc\0\u5427\0\u5452\0\u547d\0\u54a8\0\u54d3\0\u54fe\0\u5529"+
    "\0\u5554\0\u557f\0\u55aa\0\u55d5\0\u5600\0\u562b\0\u5656\0\u5681"+
    "\0\u56ac\0\u56d7\0\u5702\0\u572d\0\u5758\0\u5783\0\u2a54\0\u57ae"+
    "\0\u57d9\0\u5804\0\u582f\0\u585a\0\u5885\0\u58b0\0\u58db\0\u5906"+
    "\0\u5931\0\u595c\0\u5987\0\u59b2\0\u59dd\0\u3cf9\0\u5a08\0\u5a33"+
    "\0\u5a5e\0\u5a89\0\u5ab4\0\u5adf\0\u5b0a\0\u5b35\0\u5b60\0\u5b8b"+
    "\0\u5bb6\0\u5be1\0\u5c0c\0\u5c37\0\u5c62\0\u5c8d\0\u5cb8\0\u5ce3"+
    "\0\u5d0e\0\u5d39\0\u5d64\0\u5d8f\0\u5dba\0\u5de5\0\u5e10\0\u5e3b"+
    "\0\u5e66\0\u5e91\0\u5ebc\0\u5ee7\0\u5f12\0\u5f3d\0\u5f68\0\u5f93"+
    "\0\u5fbe\0\u5fe9\0\u6014\0\u603f\0\u606a\0\u6095\0\u60c0\0\u60eb"+
    "\0\u6116\0\u6141\0\u616c\0\u6197\0\u61c2\0\u61ed\0\u6218\0\u6243"+
    "\0\u626e\0\u6299\0\53\0\u62c4\0\u62ef\0\u631a\0\u6345\0\u6370"+
    "\0\u639b\0\u63c6\0\u63f1\0\53\0\53\0\53\0\u641c\0\u6447"+
    "\0\u504a\0\53\0\u6472\0\u649d\0\u64c8\0\u631a\0\u64f3\0\u651e"+
    "\0\u6549\0\u6574\0\u659f\0\u65ca\0\u65f5\0\u6620\0\u664b\0\53"+
    "\0\u6676\0\u66a1\0\u66cc\0\u66f7\0\u6722\0\u674d\0\u6778\0\u67a3"+
    "\0\u67ce\0\u67f9\0\u6824\0\u684f\0\u687a\0\u68a5\0\u68d0\0\u68fb"+
    "\0\u6926\0\u6951\0\u697c\0\u69a7\0\u69d2\0\u69fd\0\u6a28\0\u6a53"+
    "\0\u6a7e\0\u6aa9\0\u6ad4\0\u6aff\0\u6b2a\0\u0aeb\0\u6b55\0\u6b80"+
    "\0\u6bab\0\u6bd6\0\u6c01\0\u6c2c\0\u6c57\0\u6c82\0\u6cad\0\u6cd8"+
    "\0\u6d03\0\u6d2e\0\u6d59\0\u6d84\0\u6daf\0\u6dda\0\u422e\0\u6e05"+
    "\0\u6e30\0\u6e5b\0\u6e86\0\u6eb1\0\u6edc\0\u6f07\0\u6f32\0\u6f5d"+
    "\0\u6f88\0\u6fb3\0\u6fde\0\u7009\0\u7034\0\u705f\0\u708a\0\u70b5"+
    "\0\u70e0\0\53\0\u710b\0\u7136\0\u7161\0\u718c\0\u71b7\0\u71e2"+
    "\0\u720d\0\u7238\0\u7263\0\u728e\0\u72b9\0\u72e4\0\u730f\0\u733a"+
    "\0\53\0\u7365\0\53\0\u7390\0\u73bb\0\u73e6\0\u7411\0\u743c"+
    "\0\u7467\0\u7492\0\u74bd\0\u74e8\0\u7513\0\u753e\0\u4055\0\u7569"+
    "\0\u7594\0\u75bf\0\u75ea\0\u7615\0\u7640\0\u766b\0\u7696\0\u76c1"+
    "\0\u76ec\0\u7717\0\u7742\0\u776d\0\u7798\0\u77c3\0\u77ee\0\u7819"+
    "\0\u7844\0\u786f\0\u789a\0\u78c5\0\u78f0\0\u791b\0\u7946\0\u7971"+
    "\0\u799c\0\u79c7\0\u79f2\0\u7a1d\0\u7a48\0\u7a73\0\53\0\u070e"+
    "\0\53\0\u7a9e\0\u7ac9\0\u7af4\0\u7b1f\0\u7b4a\0\u7b75\0\u7ba0"+
    "\0\u7bcb\0\u7bf6\0\u7c21\0\u7c4c\0\u7c77\0\u7ca2\0\u7ccd\0\u7cf8"+
    "\0\u7d23\0\u7d4e\0\u7d79\0\u7da4\0\u7dcf\0\u7dfa\0\u7e25\0\u7e50"+
    "\0\u7e7b\0\u7ea6\0\u7ed1\0\u7efc\0\u7f27\0\u7f52\0\u7f7d\0\u7fa8"+
    "\0\u7fd3\0\u7ffe\0\u8029\0\u8054\0\u807f\0\u80aa\0\u80d5\0\u8100"+
    "\0\u5e10\0\u812b\0\u8156\0\u659f\0\u8181\0\u81ac\0\u81d7\0\u8202"+
    "\0\u822d\0\u8258\0\u8283\0\u82ae\0\u82d9\0\u8304\0\u832f\0\u835a"+
    "\0\u8385\0\u83b0\0\u83db\0\u8406\0\u8431\0\u845c\0\u8487\0\u84b2"+
    "\0\u84dd\0\u8508\0\u8533\0\u855e\0\u2c83\0\u8589\0\u85b4\0\u85df"+
    "\0\u860a\0\u8635\0\u8660\0\u868b\0\u86b6\0\u86e1\0\u870c\0\u8737"+
    "\0\u8762\0\u878d\0\u87b8\0\u87e3\0\u880e\0\u8839\0\u8864\0\u888f"+
    "\0\u88ba\0\u88e5\0\u8910\0\u893b\0\u8966\0\u8991\0\u89bc\0\u89e7"+
    "\0\u8a12\0\u8a3d\0\u8a68\0\u8a93\0\u8abe\0\u8ae9\0\u8b14\0\u8b3f"+
    "\0\u8b6a\0\u8b95\0\u8bc0\0\u8beb\0\u8c16\0\u5121\0\u8c41\0\u8c6c"+
    "\0\u8c97\0\u8cc2\0\u8ced\0\u8d18\0\u8d43\0\u8d6e\0\u8d99\0\u8dc4"+
    "\0\u8def\0\u8e1a\0\u8e45\0\u8e70\0\u8e9b\0\u8ec6\0\u8ef1\0\u8f1c"+
    "\0\u8f47\0\u8f72\0\u8f9d\0\u8fc8\0\u8ff3\0\u901e\0\u9049\0\u9074"+
    "\0\u2198\0\u909f\0\u90ca\0\u90f5\0\u9120\0\u914b\0\u67a3\0\u9176"+
    "\0\u91a1\0\u91cc\0\u91f7\0\u9222\0\u924d\0\u9278\0\u92a3\0\u92ce"+
    "\0\u92f9\0\53\0\u9324\0\u934f\0\u937a\0\53\0\u93a5\0\u93d0"+
    "\0\u93fb\0\u9426\0\u9451\0\u947c\0\u94a7\0\u29fe\0\u94d2\0\u94fd"+
    "\0\u9528\0\u9553\0\u957e\0\u95a9\0\u95d4\0\u95ff\0\u962a\0\u9655"+
    "\0\u9680\0\u96ab\0\u96d6\0\u9701\0\u972c\0\u9757\0\u9782\0\u97ad"+
    "\0\u97d8\0\u7742\0\u9803\0\u982e\0\u9859\0\u9884\0\u98af\0\u1784"+
    "\0\u98da\0\u9905\0\u9930\0\u995b\0\u9986\0\u99b1\0\u99dc\0\u9a07"+
    "\0\u9a32\0\u9a5d\0\u9a88\0\u9ab3\0\u9ade\0\u9b09\0\u9b34\0\u9b5f"+
    "\0\u9b8a\0\u9bb5\0\u9be0\0\u9c0b\0\u9c36\0\u9c61\0\u9c8c\0\u9cb7"+
    "\0\u9ce2\0\u9d0d\0\u9d38\0\u9d63\0\u9d8e\0\u9db9\0\u9de4\0\u9e0f"+
    "\0\u4157\0\u9e3a\0\u9e65\0\u9e90\0\u9ebb\0\u9ee6\0\u9f11\0\u9f3c"+
    "\0\u9f67\0\u9f92\0\u9fbd\0\u9fe8\0\ua013\0\53\0\ua03e\0\ua069"+
    "\0\ua094\0\ua0bf\0\ua0ea\0\ua115\0\ua140\0\ua16b\0\ua196\0\u86e1"+
    "\0\ua1c1\0\ua1ec\0\ua217\0\ua242\0\ua26d\0\ua298\0\ua2c3\0\ua2ee"+
    "\0\ua319\0\ua344\0\ua36f\0\ua39a\0\ua3c5\0\ua3f0\0\ua41b\0\ua446"+
    "\0\ua471\0\ua49c\0\ua4c7\0\ua4f2\0\ua51d\0\ua548\0\ua573\0\ua59e"+
    "\0\ua5c9\0\ua5f4\0\ua61f\0\ua64a\0\ua675\0\ua6a0\0\ua6cb\0\ua6f6"+
    "\0\ua721\0\ua74c\0\ua777\0\ua7a2\0\ua7cd\0\ua7f8\0\ua823\0\ua84e"+
    "\0\ua879\0\ua8a4\0\ua8cf\0\ua8fa\0\ua925\0\ua950\0\ua97b\0\ua9a6"+
    "\0\ua9d1\0\ua9fc\0\uaa27\0\uaa52\0\uaa7d\0\uaaa8\0\uaad3\0\uaafe"+
    "\0\uab29\0\uab54\0\uab7f\0\uabaa\0\uabd5\0\uac00\0\uac2b\0\uac56"+
    "\0\uac81\0\uacac\0\uacd7\0\uad02\0\uad2d\0\uad58\0\uad83\0\uadae"+
    "\0\uadd9\0\uae04\0\uae2f\0\uae5a\0\uae85\0\uaeb0\0\uaedb\0\uaf06"+
    "\0\uaf31\0\uaf5c\0\uaf87\0\uafb2\0\uafdd\0\ub008\0\ub033\0\ub05e"+
    "\0\ub089\0\ub0b4\0\ub0df\0\ub10a\0\ub135\0\ub160\0\ub18b\0\ub1b6"+
    "\0\ub1e1\0\ub20c\0\ub237\0\ub262\0\ub28d\0\ub2b8\0\ub2e3\0\ub30e"+
    "\0\ub339\0\ub364\0\ub38f\0\ub3ba\0\ub3e5\0\ub410\0\ub43b\0\ub466"+
    "\0\ub491\0\ub4bc\0\ub4e7\0\ub512\0\ub53d\0\ub568\0\ub593\0\ub5be"+
    "\0\ub5e9\0\ub614\0\ub63f\0\ub66a\0\ub695\0\ub6c0\0\ub6eb\0\ub716"+
    "\0\ub741\0\ub76c\0\ub797\0\ub7c2\0\ub7ed\0\u45b5\0\ub818\0\ub843"+
    "\0\ub86e\0\ub899\0\ub8c4\0\ub8ef\0\ub91a\0\ub945\0\ub970\0\ub99b"+
    "\0\ub9c6\0\53\0\ub9f1\0\uba1c\0\uba47\0\uba72\0\uba9d\0\ubac8"+
    "\0\ubaf3\0\ubb1e\0\ubb49\0\ubb74\0\ubb9f\0\ubbca\0\ubbf5\0\ubc20"+
    "\0\ubc4b\0\ubc76\0\ubca1\0\ubccc\0\ubcf7\0\ubd22\0\ubd4d\0\ubd78"+
    "\0\ubda3\0\ubdce\0\ubdf9\0\ube24\0\ube4f\0\ube7a\0\ubea5\0\ubed0"+
    "\0\ubefb\0\53\0\ubf26\0\ubf51\0\ubf7c\0\ubfa7\0\ubfd2\0\ubffd"+
    "\0\uc028\0\uc053\0\uc07e\0\uc0a9\0\uc0d4\0\uc0ff\0\uc12a\0\uc155"+
    "\0\uc180\0\uc1ab\0\uc1d6\0\uc201\0\uc22c\0\uc257\0\uc282\0\uc2ad"+
    "\0\uc2d8\0\uc303\0\uc32e\0\uc359\0\uc384\0\uc3af\0\uc3da\0\uc405"+
    "\0\uc430\0\uc45b\0\uc486\0\uc4b1\0\uc4dc\0\uc507\0\uc532\0\uc55d"+
    "\0\uc588\0\uc5b3\0\uc5de\0\uc609\0\uc634\0\uc65f\0\uc68a\0\uc6b5"+
    "\0\uc6e0\0\uc70b\0\uc736\0\uc761\0\uc78c\0\uc7b7\0\uc7e2\0\uc80d"+
    "\0\uc838\0\uc863\0\uc88e\0\uc8b9\0\uc8e4\0\uc90f\0\53\0\uc93a"+
    "\0\uc965\0\uc990\0\uc9bb\0\uc9e6\0\uca11\0\uca3c\0\uca67\0\53"+
    "\0\uca92\0\ucabd\0\ucae8\0\u68d0\0\ucb13\0\ucb3e\0\ucb69\0\ucb94"+
    "\0\ucbbf\0\ucbea\0\ucc15\0\ucc40\0\ucc6b\0\ucc96\0\uccc1\0\uccec"+
    "\0\ucd17\0\ucd42\0\ucd6d\0\ucd98\0\ucdc3\0\ucdee\0\uce19\0\uce44"+
    "\0\uce6f\0\uce9a\0\ucec5\0\ucef0\0\ucf1b\0\53\0\ucf46\0\ucf71"+
    "\0\ua8cf\0\ucf9c\0\ucfc7\0\ucff2\0\ud01d\0\ud048\0\ud073\0\ud09e"+
    "\0\ud0c9\0\ud0f4\0\ud11f\0\ud14a\0\ud175\0\ud1a0\0\ud1cb\0\ud1f6"+
    "\0\ud221\0\ud24c\0\ud277\0\ud2a2\0\ud2cd\0\ud2f8\0\ud323\0\ud34e"+
    "\0\ud379\0\ud3a4\0\ud3cf\0\ud3fa\0\ud425\0\ud450\0\ud47b\0\ud4a6"+
    "\0\ud4d1\0\ud4fc\0\ud527\0\ud552\0\ud57d\0\ud5a8\0\ud5d3\0\ud5fe"+
    "\0\ud629\0\ud654\0\ud67f\0\ud6aa\0\ud6d5\0\ud700\0\ud72b\0\ud756"+
    "\0\ud781\0\ud7ac\0\ud7d7\0\ud802\0\ud82d\0\ud858\0\ud883\0\ud8ae"+
    "\0\ud8d9\0\ud904\0\ud92f\0\ud95a\0\ud985\0\ud9b0\0\uac56\0\ud9db"+
    "\0\uda06\0\uda31\0\53\0\uda5c\0\u2198\0\u2198\0\uda87\0\udab2"+
    "\0\udadd\0\udb08\0\udb33\0\udb5e\0\uc965\0\udb89\0\udbb4\0\udbdf"+
    "\0\udc0a\0\udc35\0\udc60\0\udc8b\0\udcb6\0\udce1\0\udd0c\0\udd37"+
    "\0\udd62\0\udd8d\0\uddb8\0\udde3\0\ude0e\0\ude39\0\ude64\0\u2198"+
    "\0\ude8f\0\udeba\0\udee5\0\udf10\0\udf3b\0\udf66\0\udf91\0\udfbc"+
    "\0\udfe7\0\ue012\0\ue03d\0\ue068\0\ue093\0\ue0be\0\ud34e\0\ue0e9"+
    "\0\ue114\0\ue13f\0\ue16a\0\ue195\0\ue1c0\0\ue1eb\0\ue216\0\ue241"+
    "\0\ue26c\0\ue297\0\ue2c2\0\ue2ed\0\ue318\0\ue343\0\ue36e\0\ue399"+
    "\0\ue3c4\0\ue3ef\0\ue41a\0\ue445\0\ue470\0\ue49b\0\ue4c6\0\udf10"+
    "\0\ue4f1\0\ue51c\0\ue547\0\ue572\0\ue59d\0\ue5c8\0\ue5f3\0\ue61e"+
    "\0\ue649\0\udb08\0\ue674\0\ue69f\0\ue6ca\0\ue470";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1454];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\2\1\33\1\34\1\35\1\36\1\4\1\37"+
    "\1\40\1\37\1\41\3\2\1\4\1\2\1\42\1\43"+
    "\55\0\1\4\54\0\2\6\54\0\1\44\1\45\2\0"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\2\0\1\60\3\0\1\61\25\0\1\62"+
    "\3\0\1\63\1\0\1\64\7\0\1\65\1\0\1\66"+
    "\32\0\1\67\2\0\1\70\1\71\1\0\1\72\2\0"+
    "\1\73\1\74\3\0\1\75\1\0\1\76\32\0\1\77"+
    "\3\0\1\100\1\0\1\101\7\0\1\102\1\0\1\103"+
    "\2\0\1\104\27\0\1\105\1\106\2\0\1\107\1\110"+
    "\1\111\1\112\4\0\1\113\5\0\1\114\2\0\1\115"+
    "\2\0\1\116\22\0\1\117\2\0\1\120\1\121\1\0"+
    "\1\122\3\0\1\123\1\0\1\124\1\0\1\125\1\0"+
    "\1\126\33\0\1\127\1\130\4\0\1\131\1\132\11\0"+
    "\1\133\30\0\1\134\3\0\1\135\1\0\1\136\3\0"+
    "\1\137\3\0\1\140\1\0\1\141\2\0\1\142\27\0"+
    "\1\143\1\144\1\145\1\146\1\147\1\150\1\151\2\0"+
    "\1\152\1\0\1\153\1\154\1\155\1\156\1\157\1\160"+
    "\21\0\1\161\10\0\1\162\2\0\1\163\1\164\1\0"+
    "\1\165\11\0\1\166\32\0\1\167\2\0\1\170\1\171"+
    "\1\0\1\172\7\0\1\173\1\0\1\174\32\0\1\175"+
    "\2\0\1\176\1\177\1\0\1\200\3\0\1\201\1\0"+
    "\1\202\1\0\1\203\1\0\1\204\2\0\1\205\27\0"+
    "\1\206\3\0\1\207\1\0\1\210\5\0\1\211\3\0"+
    "\1\212\32\0\1\213\3\0\1\214\1\0\1\215\7\0"+
    "\1\216\1\0\1\217\2\0\1\220\30\0\1\221\6\0"+
    "\1\222\1\0\1\223\1\224\37\0\1\225\1\226\2\0"+
    "\1\227\1\0\1\230\11\0\1\231\33\0\1\232\1\233"+
    "\2\0\1\234\2\0\1\235\1\236\1\237\1\0\1\240"+
    "\1\0\1\241\2\0\1\242\1\0\1\243\1\244\1\245"+
    "\2\0\1\246\22\0\1\247\3\0\1\250\1\0\1\251"+
    "\3\0\1\252\1\0\1\253\1\0\1\254\1\0\1\255"+
    "\2\0\1\256\27\0\1\257\3\0\1\260\1\0\1\261"+
    "\3\0\1\262\3\0\1\263\1\0\1\264\36\0\1\265"+
    "\13\0\1\266\32\0\1\267\3\0\1\270\1\0\1\271"+
    "\3\0\1\272\1\0\1\273\1\0\1\274\1\0\1\275"+
    "\36\0\1\276\11\0\1\277\1\0\1\300\36\0\1\301"+
    "\46\0\1\302\3\0\1\303\1\0\1\304\7\0\1\305"+
    "\67\0\1\306\54\0\1\307\17\0\1\310\3\0\1\311"+
    "\1\312\1\313\46\0\1\314\50\0\1\315\2\0\1\316"+
    "\4\0\1\317\52\0\1\320\56\0\1\321\26\0\1\322"+
    "\2\0\5\322\1\323\10\322\1\324\15\322\1\325\6\322"+
    "\2\0\3\322\6\0\1\326\17\0\1\327\34\0\1\330"+
    "\1\0\1\331\1\332\1\333\6\0\1\334\2\0\1\335"+
    "\1\0\1\336\34\0\1\244\50\0\1\337\11\0\1\340"+
    "\1\341\50\0\1\342\60\0\1\343\51\0\1\344\34\0"+
    "\1\345\51\0\1\346\1\347\50\0\1\350\4\0\1\351"+
    "\1\352\2\0\1\353\12\0\1\354\27\0\1\355\3\0"+
    "\1\356\46\0\1\357\10\0\1\360\42\0\1\361\26\0"+
    "\1\362\31\0\1\351\10\0\1\363\31\0\1\364\3\0"+
    "\1\365\1\0\1\366\3\0\1\367\5\0\1\370\33\0"+
    "\1\371\73\0\1\372\34\0\1\373\13\0\1\374\52\0"+
    "\1\375\33\0\1\376\10\0\1\377\40\0\1\u0100\10\0"+
    "\1\u0101\1\u0102\3\0\1\u0103\35\0\1\u0104\1\u0105\3\0"+
    "\1\u0106\1\u0107\1\u0108\4\0\1\243\1\0\1\54\10\0"+
    "\1\u0109\22\0\1\u010a\1\244\10\0\1\u010b\1\0\1\u010c"+
    "\40\0\1\u010d\4\0\1\u010e\1\u010f\2\0\1\u0110\1\u0111"+
    "\1\u0112\36\0\1\u0113\10\0\1\260\2\0\1\u0114\36\0"+
    "\1\u0115\1\u0116\6\0\1\u0117\1\u0118\1\0\1\u0119\1\0"+
    "\1\u011a\40\0\1\u011b\50\0\1\u011c\7\0\1\u0105\7\0"+
    "\1\u011d\52\0\1\u011e\44\0\1\244\54\0\1\u011f\1\0"+
    "\1\u0120\34\0\1\u0121\17\0\1\u0122\52\0\1\u0123\34\0"+
    "\1\u0124\24\0\1\u0125\43\0\1\u0105\55\0\1\u0126\31\0"+
    "\1\u0127\47\0\1\u0128\1\u0129\5\0\1\u012a\1\0\1\u012b"+
    "\1\u012c\1\0\1\u012d\1\u012e\34\0\1\u012f\3\0\1\u0130"+
    "\1\0\1\u0131\11\0\1\u0132\46\0\1\u0133\40\0\1\u0134"+
    "\50\0\1\u0135\3\0\1\u0136\11\0\1\u0137\1\0\1\u0138"+
    "\32\0\1\u0139\3\0\1\u013a\11\0\1\u013b\1\0\1\u013c"+
    "\34\0\1\u013d\2\0\1\u013e\5\0\1\u0105\37\0\1\u013f"+
    "\1\u0140\3\0\1\u0141\2\0\1\u0142\1\244\1\u0143\1\0"+
    "\1\u0144\1\u0145\1\u0146\1\0\1\u0147\1\u0148\41\0\1\u0149"+
    "\20\0\1\u014a\31\0\1\u014b\46\0\1\u014c\56\0\1\u014d"+
    "\3\0\1\u014e\54\0\1\u014f\35\0\1\u0150\14\0\1\u0151"+
    "\4\0\1\u0105\27\0\1\u0152\1\u0153\2\0\1\u0154\1\u0155"+
    "\2\0\1\u0156\51\0\1\u0157\43\0\1\u0158\3\0\1\u0159"+
    "\1\0\1\u015a\7\0\1\u015b\1\0\1\u015c\2\0\1\u015d"+
    "\33\0\1\u015e\1\u015f\4\0\1\u0160\7\0\1\314\31\0"+
    "\1\u0161\2\0\1\u0162\1\u0163\3\0\1\u0164\2\0\1\u0165"+
    "\5\0\1\244\5\0\1\54\44\0\1\u0166\31\0\1\u0167"+
    "\1\314\3\0\1\u010c\2\0\1\314\1\u0168\1\0\1\u0169"+
    "\6\0\1\u010d\27\0\1\u016a\17\0\1\u016b\32\0\1\u016c"+
    "\3\0\1\u016d\1\0\1\u016e\3\0\1\u016f\3\0\1\u0170"+
    "\1\0\1\u0171\32\0\1\u0172\3\0\1\u0173\1\0\1\u0174"+
    "\3\0\1\u0175\3\0\1\260\1\0\1\u0176\32\0\1\u0177"+
    "\1\u0178\1\u010d\1\0\1\u0179\1\u017a\3\0\1\u017b\2\0"+
    "\1\u017c\13\0\1\u017d\25\0\1\u017e\14\0\1\u017f\33\0"+
    "\1\u0180\1\u0181\21\0\1\u0182\32\0\1\u0183\46\0\1\u0184"+
    "\3\0\1\u0185\1\0\1\u0186\3\0\1\u0187\1\0\1\u0188"+
    "\3\0\1\u0189\36\0\1\u018a\1\0\1\u018b\11\0\1\u018c"+
    "\36\0\1\u018d\1\0\1\u018e\45\0\1\u018f\10\0\1\u0190"+
    "\56\0\1\u0191\45\0\1\u0181\2\0\1\u010c\1\0\1\u0192"+
    "\6\0\1\u0193\43\0\1\u0194\36\0\1\u0195\5\0\1\u0196"+
    "\3\0\1\u0197\36\0\1\u0198\3\0\1\u0199\1\0\1\u019a"+
    "\11\0\1\u019b\2\0\1\u019c\30\0\1\u019d\1\u0121\7\0"+
    "\1\u019e\42\0\1\u019f\11\0\1\u01a0\50\0\1\u01a1\41\0"+
    "\1\u01a2\1\u01a3\2\0\1\u01a4\1\u01a5\12\0\1\u01a6\37\0"+
    "\1\u01a7\44\0\1\u0119\12\0\1\u01a8\6\0\1\u01a9\31\0"+
    "\1\114\5\0\1\u01aa\44\0\1\u01ab\51\0\1\u01ac\6\0"+
    "\2\u01ad\7\0\1\243\33\0\1\u01ae\1\u01af\3\0\1\u01b0"+
    "\1\0\1\u01b1\1\0\1\u01b2\7\0\1\u0123\1\u010d\27\0"+
    "\1\u01b3\17\0\1\u01b4\2\0\1\u01b5\27\0\1\u01b6\1\u01b7"+
    "\10\0\1\u01b8\1\u01b9\61\0\1\u01ba\30\0\1\u01bb\17\0"+
    "\1\u01bc\32\0\1\u01bd\15\0\1\u01be\36\0\1\314\12\0"+
    "\1\u01bf\47\0\1\u01c0\1\0\1\u01c1\40\0\1\u01c2\56\0"+
    "\1\u01c3\1\u01c4\1\0\1\u01c5\5\0\1\u0123\3\0\1\314"+
    "\27\0\1\u01c6\1\u0119\1\u01c7\4\0\1\314\10\0\1\u01c8"+
    "\34\0\1\314\5\0\1\u01c9\7\0\1\u01ca\1\u01cb\1\u01cc"+
    "\2\0\1\u01cd\1\0\1\u01ce\23\0\1\u01cf\62\0\1\u01d0"+
    "\1\0\1\u01d1\6\0\1\243\32\0\1\u01d2\3\0\1\u01d3"+
    "\1\u01d4\1\u01ad\2\0\1\u01d5\2\0\1\u01d6\1\0\1\u01d7"+
    "\2\0\1\u01d8\30\0\1\u01d9\1\0\1\u01da\1\0\1\260"+
    "\1\u01db\46\0\1\u01dc\6\0\1\u01dd\52\0\1\u01de\43\0"+
    "\1\u01df\1\u01e0\4\0\1\u01e1\1\u01e2\1\0\1\u01e3\3\0"+
    "\1\u01e4\44\0\1\u01e5\51\0\1\u01e6\4\0\1\u01e7\36\0"+
    "\1\u01e8\70\0\1\u01e9\54\0\1\u01ea\33\0\1\u01eb\55\0"+
    "\1\u01ec\13\0\1\u01ed\36\0\1\u01ee\6\0\1\u019d\7\0"+
    "\1\u0105\43\0\1\u01ef\36\0\1\u01f0\56\0\1\u01f1\1\0"+
    "\1\u01f2\22\0\1\u01f3\23\0\1\372\1\u01f4\51\0\1\u01f5"+
    "\52\0\1\u01f6\56\0\1\u01f7\5\0\1\244\36\0\1\u01f8"+
    "\30\0\1\u01f9\30\0\1\353\45\0\1\u01fa\7\0\1\u01fb"+
    "\60\0\1\u01fc\42\0\1\u01fd\67\0\1\u01fe\31\0\1\u01ff"+
    "\47\0\1\351\1\244\14\0\1\u0200\1\0\1\u0201\1\u0105"+
    "\30\0\1\u0202\1\u0203\1\u0204\1\0\1\u0205\1\u0206\2\0"+
    "\1\u0207\3\0\1\u0208\5\0\1\u0209\2\0\1\u020a\26\0"+
    "\1\u0119\1\u020b\4\0\1\314\2\0\1\u020c\5\0\1\u020d"+
    "\32\0\1\u020e\3\0\1\u020f\1\0\1\u0210\11\0\1\u0211"+
    "\36\0\1\u0212\11\0\1\u0213\1\0\1\u01ed\34\0\1\u0214"+
    "\3\0\1\u0215\1\0\1\u0216\1\0\1\u0217\1\0\1\107"+
    "\6\0\1\u010d\27\0\1\u0218\1\0\1\u0219\7\0\1\u021a"+
    "\1\0\1\u021b\1\0\1\u021c\5\0\1\u0105\30\0\1\u0123"+
    "\7\0\1\u021d\42\0\1\u010d\62\0\1\u021e\15\0\1\u01d7"+
    "\22\0\1\u021f\3\0\1\u0220\1\0\1\u0221\11\0\1\u0222"+
    "\32\0\1\u0223\1\u0105\4\0\1\u0224\14\0\1\u0225\27\0"+
    "\1\u0226\1\u0145\2\0\1\u0227\1\0\1\u0228\3\0\1\u0229"+
    "\1\0\1\u022a\3\0\1\u01e4\32\0\1\u022b\70\0\1\u022c"+
    "\36\0\1\353\2\0\1\u022d\4\0\1\u022e\1\0\1\u022f"+
    "\1\u0230\44\0\1\314\4\0\1\u0231\37\0\1\u0232\2\0"+
    "\1\u0233\3\0\1\u0234\1\0\1\u0235\12\0\1\u0236\2\0"+
    "\1\u0237\26\0\1\u0238\11\0\1\u0239\1\0\1\u023a\32\0"+
    "\1\u023b\3\0\1\u023c\13\0\1\u023d\2\0\1\244\31\0"+
    "\1\u023e\62\0\1\u023f\3\0\1\u0240\3\0\1\u015d\41\0"+
    "\1\u0241\2\0\1\u0242\45\0\1\u0243\61\0\1\u0244\2\0"+
    "\1\u0105\52\0\1\u0245\45\0\1\u0246\37\0\1\u0247\65\0"+
    "\1\u0248\52\0\1\u0249\71\0\1\37\54\0\1\u024a\21\0"+
    "\1\u024b\63\0\1\u024c\46\0\1\u024d\53\0\1\u024e\5\0"+
    "\1\u024f\40\0\1\u0250\11\0\1\u0251\52\0\1\u0252\63\0"+
    "\1\u0253\35\0\1\u013f\30\0\1\322\2\0\3\322\1\u0254"+
    "\37\322\2\0\4\322\2\0\3\322\1\u0254\11\322\1\u0255"+
    "\25\322\2\0\4\322\2\0\3\322\1\u0256\37\322\2\0"+
    "\4\322\2\0\3\322\1\u0254\1\322\1\u0257\3\322\1\u0258"+
    "\5\322\1\u0259\23\322\2\0\3\322\25\0\1\u01d7\3\0"+
    "\1\u025a\46\0\1\u025b\41\0\1\u025c\47\0\1\u025d\57\0"+
    "\1\u025e\42\0\1\u025f\62\0\1\u01ad\5\0\1\u0260\40\0"+
    "\1\u0261\51\0\1\u0262\55\0\1\u0263\50\0\1\u0264\51\0"+
    "\1\u0265\53\0\1\u0266\64\0\1\u0267\40\0\1\u0268\47\0"+
    "\1\u0269\57\0\1\u026a\56\0\1\u026b\57\0\1\u0105\35\0"+
    "\1\u026c\101\0\1\u026d\23\0\1\u026e\1\0\1\u026f\46\0"+
    "\1\u0270\62\0\1\u0271\73\0\1\u0272\31\0\1\u0273\56\0"+
    "\1\u0123\37\0\1\u0274\1\u0275\51\0\1\u0276\4\0\1\u0277"+
    "\1\0\1\u0278\4\0\1\u0279\5\0\1\u027a\37\0\1\u0275"+
    "\1\0\1\u027b\44\0\1\u0237\13\0\1\u027c\42\0\1\u0278"+
    "\5\0\1\u027d\36\0\1\u027e\54\0\1\u0154\47\0\1\u027f"+
    "\12\0\1\u0280\72\0\1\u0281\16\0\1\u0282\54\0\1\u011d"+
    "\14\0\1\u0283\42\0\1\244\43\0\1\u0284\1\u0105\53\0"+
    "\1\u0285\62\0\1\u0105\47\0\1\u0105\12\0\1\u010d\42\0"+
    "\1\u0286\44\0\1\u0108\60\0\1\u0287\50\0\1\u010f\51\0"+
    "\1\314\53\0\1\u0288\46\0\1\u010d\2\0\1\u0289\56\0"+
    "\1\u028a\53\0\1\u0105\40\0\1\u0200\17\0\1\314\45\0"+
    "\1\u028b\44\0\1\u028c\47\0\1\u028d\56\0\1\u0123\51\0"+
    "\1\u010d\53\0\1\u028e\43\0\1\u028f\55\0\1\u0290\3\0"+
    "\1\u0291\56\0\1\54\44\0\1\u0292\44\0\1\u0293\53\0"+
    "\1\u0294\54\0\1\u0295\52\0\1\u0296\53\0\1\u0105\47\0"+
    "\1\u0297\3\0\1\u0298\5\0\1\u0299\14\0\1\u029a\32\0"+
    "\1\u029b\46\0\1\u029c\47\0\1\u029d\51\0\1\u029e\57\0"+
    "\1\u029f\47\0\1\u02a0\1\u02a1\47\0\1\u02a2\6\0\1\u0105"+
    "\2\0\1\u02a3\1\u02a4\41\0\1\u02a5\54\0\1\u02a6\6\0"+
    "\1\u0105\53\0\1\u02a7\5\0\1\u02a8\36\0\1\u0103\4\0"+
    "\1\u02a9\1\0\1\u02aa\41\0\1\u02ab\10\0\1\u02ac\7\0"+
    "\1\357\32\0\1\u02ad\6\0\1\u02ae\1\u02af\12\0\1\u02b0"+
    "\32\0\1\u025b\46\0\1\u02b1\71\0\1\u0105\50\0\1\244"+
    "\41\0\1\u02b2\2\0\1\u019d\47\0\1\u02b3\47\0\1\u02b4"+
    "\3\0\1\244\51\0\1\u02b5\42\0\1\u02b6\53\0\1\u02b7"+
    "\62\0\1\u02b8\43\0\1\u02b9\66\0\1\u02ba\36\0\1\u0105"+
    "\60\0\1\u02bb\61\0\1\u02bc\35\0\1\u02bd\51\0\1\u02be"+
    "\65\0\1\u02bf\3\0\1\u02c0\36\0\1\u0166\47\0\1\u02c1"+
    "\70\0\1\357\45\0\1\u028f\6\0\1\u02c2\33\0\1\u02c3"+
    "\1\0\1\u02c4\1\0\1\u02c5\44\0\1\u02c6\4\0\1\u02c7"+
    "\2\0\1\u02c8\46\0\1\u02c9\46\0\1\u02ca\70\0\1\u02cb"+
    "\34\0\1\u02cc\52\0\1\u011b\57\0\1\u0200\67\0\1\u02cd"+
    "\44\0\1\u019d\40\0\1\u02ac\62\0\1\244\60\0\1\u02ce"+
    "\40\0\1\u02cf\4\0\1\u02d0\40\0\1\u02d1\7\0\1\u0290"+
    "\10\0\1\u02d2\30\0\1\u02d3\7\0\1\u02d4\1\314\71\0"+
    "\1\u0289\23\0\1\u02d5\66\0\1\u02d6\12\0\1\u01ad\53\0"+
    "\1\u02d7\40\0\1\244\41\0\1\u02d8\50\0\1\u0166\12\0"+
    "\1\u0283\43\0\1\u02d9\44\0\1\u02da\51\0\1\u02db\64\0"+
    "\1\u02dc\56\0\1\314\2\0\1\314\37\0\1\u02dd\60\0"+
    "\1\u02de\43\0\1\107\10\0\1\54\44\0\1\u02df\42\0"+
    "\1\u0119\1\347\7\0\1\u0282\40\0\1\u017c\53\0\1\u02e0"+
    "\3\0\1\u02e0\51\0\1\u02e1\1\0\1\u02e2\7\0\1\u02e3"+
    "\35\0\1\142\5\0\1\u02e4\56\0\1\u0105\1\u0289\3\0"+
    "\1\u02e5\44\0\1\u015f\4\0\1\u025e\33\0\1\u02e6\3\0"+
    "\1\u02e7\47\0\1\u01d7\11\0\1\u0105\37\0\1\u02e8\5\0"+
    "\1\u02e9\45\0\1\u01ad\1\314\6\0\1\u02ea\1\u01ad\5\0"+
    "\1\u02eb\35\0\1\u02ec\10\0\1\244\14\0\1\u02ed\23\0"+
    "\1\314\4\0\1\u010d\44\0\1\u0166\6\0\1\u0288\6\0"+
    "\1\u010d\53\0\1\u02ee\33\0\1\u0166\2\0\1\u010c\3\0"+
    "\1\u0288\56\0\1\u010d\42\0\1\u02ef\52\0\1\u02f0\60\0"+
    "\1\u02f1\45\0\1\u02f2\11\0\1\u0181\2\0\1\u0181\67\0"+
    "\1\u0288\15\0\1\u02f3\50\0\1\u02e6\3\0\1\u02f4\60\0"+
    "\1\u02f5\40\0\1\u02f6\1\u02f7\2\0\1\u02f7\7\0\1\u02f8"+
    "\37\0\1\u02f9\1\u0181\4\0\1\372\4\0\1\u02f8\42\0"+
    "\1\u02fa\1\0\1\u02fb\7\0\1\u02fc\42\0\1\260\52\0"+
    "\1\u02fd\10\0\1\u0289\37\0\1\u02fe\6\0\1\u019d\46\0"+
    "\1\u02ff\45\0\1\u01e0\64\0\1\u02f8\52\0\1\u02cb\55\0"+
    "\1\u0166\2\0\1\u0166\36\0\1\u0300\45\0\1\u015f\73\0"+
    "\1\u02a8\32\0\1\353\56\0\1\u0301\50\0\1\u0302\61\0"+
    "\1\244\51\0\1\u0303\1\0\1\u0105\2\0\1\u0105\35\0"+
    "\1\u019c\11\0\1\54\37\0\1\u019c\1\u0304\7\0\1\u0305"+
    "\45\0\1\u0306\55\0\1\u0305\4\0\1\u019c\37\0\1\314"+
    "\54\0\1\u0307\51\0\1\u0308\63\0\1\u0309\53\0\1\244"+
    "\57\0\1\314\32\0\1\u030a\70\0\1\u02de\33\0\1\u02df"+
    "\72\0\1\u030b\32\0\1\u030c\53\0\1\u030d\50\0\1\u030e"+
    "\62\0\1\u0288\11\0\1\u0166\37\0\1\u0105\43\0\1\u030f"+
    "\6\0\1\u0310\43\0\1\u0311\2\0\1\u0105\50\0\1\u01c0"+
    "\5\0\1\314\45\0\1\u0312\11\0\1\u0313\36\0\1\u01e9"+
    "\11\0\1\u0314\52\0\1\u0315\42\0\1\u0316\60\0\1\u0317"+
    "\64\0\1\u0318\46\0\1\u01e8\47\0\1\u0319\43\0\1\u02de"+
    "\57\0\1\u01ca\11\0\1\u031a\50\0\1\u031b\6\0\1\u031c"+
    "\23\0\1\u0123\66\0\1\u031d\50\0\1\u031e\41\0\1\u0200"+
    "\50\0\1\u031f\5\0\1\u0320\47\0\1\u02de\50\0\1\u0166"+
    "\5\0\1\314\66\0\1\u0321\52\0\1\u0200\30\0\1\u010d"+
    "\5\0\1\u010d\2\0\1\u0322\1\u0323\14\0\1\u01d7\24\0"+
    "\1\u0324\5\0\1\u0288\55\0\1\u01ce\41\0\1\u02ca\51\0"+
    "\1\244\63\0\1\u0325\43\0\1\260\53\0\1\u0326\46\0"+
    "\1\u0327\67\0\1\u028f\37\0\1\314\1\0\1\u010d\60\0"+
    "\1\u0328\42\0\1\u0329\53\0\1\u032a\63\0\1\u032b\50\0"+
    "\1\u032c\55\0\1\u032d\41\0\1\u010d\46\0\1\u032e\53\0"+
    "\1\u0323\55\0\1\u032f\51\0\1\u0330\53\0\1\u0331\50\0"+
    "\1\u0332\53\0\1\u0333\66\0\1\u0334\36\0\1\244\53\0"+
    "\1\u0111\110\0\1\u0335\14\0\1\u0336\56\0\1\54\46\0"+
    "\1\350\52\0\1\u0337\70\0\1\u0338\31\0\1\u026b\73\0"+
    "\1\u0339\34\0\1\u017c\7\0\1\u019d\47\0\1\u033a\54\0"+
    "\1\u010d\53\0\1\372\52\0\1\u028f\67\0\1\u033b\41\0"+
    "\1\u033c\34\0\1\u033d\54\0\1\u033e\66\0\1\u033f\44\0"+
    "\1\u0340\41\0\1\u0341\52\0\1\u0342\55\0\1\u0343\56\0"+
    "\1\u0344\52\0\1\u0345\72\0\1\u0346\24\0\1\372\56\0"+
    "\1\u0347\56\0\1\u0348\44\0\1\u024f\66\0\1\u02de\2\0"+
    "\1\u0105\31\0\1\u0349\2\0\1\u034a\4\0\1\u010d\15\0"+
    "\1\372\24\0\1\314\1\0\1\u034b\2\0\1\u010d\53\0"+
    "\1\u0288\1\u034c\42\0\1\u0166\1\u034d\50\0\1\u034e\17\0"+
    "\1\u034f\40\0\1\u0350\52\0\1\u0351\5\0\1\u0105\3\0"+
    "\1\u0352\32\0\1\u0353\5\0\1\u0354\7\0\1\u0290\54\0"+
    "\1\u0355\34\0\1\u0289\1\0\1\u010d\55\0\1\u0356\57\0"+
    "\1\u0357\46\0\1\u0358\42\0\1\u02e0\3\0\1\u0359\2\0"+
    "\1\314\44\0\1\u035a\3\0\1\u035b\1\0\1\112\43\0"+
    "\1\u035c\4\0\1\u035d\10\0\1\u0192\1\u025b\37\0\1\u0119"+
    "\2\0\1\314\1\0\1\314\45\0\1\353\50\0\1\u035e"+
    "\2\0\1\u035f\23\0\1\u0360\35\0\1\u0361\41\0\1\u0105"+
    "\2\0\1\u0362\22\0\1\u0363\22\0\1\u0364\6\0\1\260"+
    "\44\0\1\u0105\7\0\1\244\16\0\1\u0365\24\0\1\u0366"+
    "\50\0\1\u0145\2\0\1\314\54\0\1\u0367\45\0\1\u010c"+
    "\20\0\1\u02a8\37\0\1\u0368\4\0\1\u0369\4\0\1\u036a"+
    "\31\0\1\u036b\13\0\1\u0105\46\0\1\u036c\53\0\1\314"+
    "\42\0\1\u0119\62\0\1\u033a\4\0\1\u036d\36\0\1\u036e"+
    "\51\0\1\u036f\51\0\1\u0370\54\0\1\244\51\0\1\u0371"+
    "\57\0\1\u0372\53\0\1\u0282\55\0\1\u02ca\41\0\1\u0373"+
    "\10\0\1\u0374\42\0\1\u0375\1\0\1\u0105\63\0\1\u0376"+
    "\42\0\1\u02de\6\0\1\u0289\56\0\1\u0377\34\0\1\314"+
    "\11\0\1\314\60\0\1\u02be\44\0\1\u01ac\41\0\1\u0378"+
    "\53\0\1\u032b\3\0\1\u0379\46\0\1\374\52\0\1\u037a"+
    "\54\0\1\u037b\61\0\1\256\4\0\1\244\4\0\1\u01ad"+
    "\40\0\1\u037c\44\0\1\314\1\0\1\314\52\0\1\u0290"+
    "\1\u02ac\5\0\1\u037d\35\0\1\u037e\51\0\1\u037f\16\0"+
    "\1\u0380\1\u0381\31\0\1\u010c\10\0\1\u0382\7\0\1\u02a8"+
    "\34\0\1\u0383\62\0\1\u0384\60\0\1\u0385\42\0\1\u0386"+
    "\52\0\1\u028f\54\0\1\u0387\42\0\1\u0388\62\0\1\u0389"+
    "\40\0\1\u038a\105\0\1\37\31\0\1\u038b\36\0\1\u0111"+
    "\56\0\1\u022b\52\0\1\u038c\60\0\1\357\47\0\1\u038d"+
    "\61\0\1\u038e\44\0\1\u038f\45\0\1\u0390\41\0\1\322"+
    "\2\0\3\322\1\u0254\7\322\1\u0391\27\322\2\0\4\322"+
    "\2\0\3\322\1\u0254\17\322\1\u0392\17\322\2\0\4\322"+
    "\2\0\3\322\1\u0254\7\322\1\u0391\1\322\1\u0393\25\322"+
    "\2\0\4\322\2\0\3\322\1\u0254\2\322\1\u0394\34\322"+
    "\2\0\4\322\2\0\3\322\1\u0254\24\322\1\u0391\12\322"+
    "\2\0\4\322\2\0\3\322\1\u0254\17\322\1\u0395\17\322"+
    "\2\0\3\322\37\0\1\u0396\25\0\1\u0397\53\0\1\u0398"+
    "\45\0\1\u0399\5\0\1\u039a\50\0\1\u033a\55\0\1\u039b"+
    "\44\0\1\u039c\52\0\1\u039d\71\0\1\u039e\54\0\1\u039f"+
    "\56\0\1\u028f\32\0\1\u03a0\56\0\1\u03a1\42\0\1\256"+
    "\62\0\1\u03a2\63\0\1\357\47\0\1\u03a3\35\0\1\u03a4"+
    "\51\0\1\u03a5\53\0\1\u03a6\51\0\1\u03a7\62\0\1\u03a8"+
    "\44\0\1\u03a9\46\0\1\u03aa\3\0\1\u03ab\13\0\1\u03ac"+
    "\52\0\1\u03ad\44\0\1\u03ae\44\0\1\u0275\50\0\1\u03a7"+
    "\4\0\1\u03a6\61\0\1\u03af\56\0\1\u03b0\32\0\1\u03b1"+
    "\75\0\1\u0297\2\0\1\u0237\30\0\1\u03b2\71\0\1\u03b3"+
    "\31\0\1\u03b4\60\0\1\u03b5\60\0\1\u03b6\41\0\1\u03b7"+
    "\45\0\1\u0105\4\0\1\314\1\u0288\46\0\1\u0290\66\0"+
    "\1\u03b8\40\0\1\u03b9\62\0\1\u03ba\64\0\1\u03bb\26\0"+
    "\1\u03bc\46\0\1\244\53\0\1\u0166\54\0\1\u03bd\50\0"+
    "\1\u03be\60\0\1\u03bf\63\0\1\u03c0\36\0\1\u03c1\50\0"+
    "\1\u03c2\52\0\1\u026e\52\0\1\u03c3\53\0\1\u03c4\53\0"+
    "\1\u03c5\46\0\1\u03c6\57\0\1\u013f\76\0\1\u03c7\30\0"+
    "\1\u03c8\2\0\1\u03b4\43\0\1\u03c9\57\0\1\u0288\3\0"+
    "\1\u0123\44\0\1\u0200\46\0\1\u03ca\70\0\1\u02f4\36\0"+
    "\1\u03cb\46\0\1\u03cc\60\0\1\u03cd\47\0\1\u019d\51\0"+
    "\1\u024d\54\0\1\u03ce\50\0\1\u03cf\56\0\1\u03d0\63\0"+
    "\1\u03d1\37\0\1\u01e8\61\0\1\u03d2\43\0\1\u01b6\60\0"+
    "\1\u03d3\50\0\1\u01b6\44\0\1\u03d4\70\0\1\u03d5\42\0"+
    "\1\u02ca\43\0\1\u0200\52\0\1\357\65\0\1\u03d6\53\0"+
    "\1\u03d7\53\0\1\u03d8\46\0\1\u03d9\40\0\1\u03da\56\0"+
    "\1\u0103\52\0\1\112\63\0\1\u03db\37\0\1\u03dc\5\0"+
    "\1\u03dd\56\0\1\u0200\42\0\1\u03de\53\0\1\u03df\54\0"+
    "\1\u0346\52\0\1\u03e0\43\0\1\u03e1\65\0\1\u03e2\53\0"+
    "\1\u03e3\42\0\1\u02ca\47\0\1\u01ac\54\0\1\u03e4\61\0"+
    "\1\u03e5\41\0\1\u03e6\57\0\1\u03e7\63\0\1\314\53\0"+
    "\1\u03e8\47\0\1\u03e9\45\0\1\u03ea\61\0\1\u0166\37\0"+
    "\1\u03eb\50\0\1\u03ec\51\0\1\u03ed\71\0\1\u024f\35\0"+
    "\1\u03ee\55\0\1\u03ef\64\0\1\u01ca\55\0\1\u015d\46\0"+
    "\1\u010d\33\0\1\u03f0\3\0\1\u013f\55\0\1\u01d7\7\0"+
    "\1\u01d7\40\0\1\u02d5\51\0\1\u03f1\55\0\1\u0166\55\0"+
    "\1\u010d\41\0\1\u02d1\52\0\1\u02e0\13\0\1\u02e7\41\0"+
    "\1\u010c\3\0\1\u0288\44\0\1\u010d\14\0\1\314\53\0"+
    "\1\u03f2\34\0\1\u03f3\11\0\1\u03f4\37\0\1\u03f5\52\0"+
    "\1\u0182\66\0\1\u02cb\50\0\1\u03f4\43\0\1\u03f6\51\0"+
    "\1\u03a6\1\u03f7\16\0\1\u03f8\31\0\1\u01b6\62\0\1\u03f9"+
    "\57\0\1\u0181\42\0\1\u0181\57\0\1\u0181\36\0\1\u03fa"+
    "\36\0\1\u0288\13\0\1\u0119\53\0\1\u03fb\52\0\1\142"+
    "\65\0\1\u03fc\51\0\1\u0181\43\0\1\u0181\47\0\1\u03fd"+
    "\60\0\1\244\2\0\1\u03fe\52\0\1\u03ff\56\0\1\u0400"+
    "\37\0\1\u0401\53\0\1\u019c\51\0\1\u019c\63\0\1\u0402"+
    "\44\0\1\u0226\51\0\1\u0403\53\0\1\u0404\56\0\1\u0405"+
    "\55\0\1\u03c8\35\0\1\u0406\54\0\1\u0407\62\0\1\u0408"+
    "\44\0\1\u03d3\66\0\1\u0226\47\0\1\u0409\55\0\1\u040a"+
    "\40\0\1\u040b\62\0\1\u03ee\40\0\1\u040c\54\0\1\u040d"+
    "\60\0\1\u040e\44\0\1\u040f\65\0\1\u0200\50\0\1\u0410"+
    "\45\0\1\u0406\42\0\1\u0411\2\0\1\u0412\66\0\1\u0413"+
    "\32\0\1\u0414\53\0\1\314\5\0\1\u0288\60\0\1\u0415"+
    "\34\0\1\u0416\103\0\1\u0417\33\0\1\u0100\63\0\1\u0418"+
    "\27\0\1\u0419\60\0\1\u01bd\61\0\1\u041a\55\0\1\u041b"+
    "\32\0\1\u041c\101\0\1\u032a\43\0\1\u041d\32\0\1\u041e"+
    "\52\0\1\u041f\17\0\1\u0420\44\0\1\u0421\56\0\1\u0422"+
    "\54\0\1\u0423\42\0\1\u0424\60\0\1\u0425\34\0\1\u0426"+
    "\53\0\1\u0166\6\0\1\u0288\45\0\1\u0427\50\0\1\u01b6"+
    "\54\0\1\u0428\61\0\1\u0429\53\0\1\u0303\45\0\1\u042a"+
    "\66\0\1\u042b\52\0\1\u0213\44\0\1\u042c\44\0\1\u02c5"+
    "\50\0\1\u042d\52\0\1\u026b\53\0\1\u042e\52\0\1\u042f"+
    "\51\0\1\u0290\3\0\1\u0288\45\0\1\u0105\47\0\1\u0430"+
    "\56\0\1\u0431\64\0\1\u0432\51\0\1\u01d7\44\0\1\u0433"+
    "\50\0\1\u02ae\56\0\1\u026b\42\0\1\314\52\0\1\u010d"+
    "\63\0\1\u0434\50\0\1\244\62\0\1\u0435\40\0\1\u0436"+
    "\53\0\1\u0437\65\0\1\u0227\47\0\1\u0438\42\0\1\u0439"+
    "\50\0\1\u043a\51\0\1\u043b\51\0\1\u0200\67\0\1\u043c"+
    "\34\0\1\314\4\0\1\u0227\44\0\1\u043d\60\0\1\u043e"+
    "\45\0\1\u0166\5\0\1\u0288\47\0\1\u043f\37\0\1\u0440"+
    "\2\0\43\u0440\2\0\3\u0440\36\0\1\u0441\26\0\1\u0442"+
    "\54\0\1\u0443\44\0\1\u0444\77\0\1\u0445\35\0\1\u0446"+
    "\43\0\1\u010c\11\0\1\u0105\43\0\1\u0447\52\0\1\u0448"+
    "\47\0\1\u03c8\73\0\1\u0449\44\0\1\u01f0\60\0\1\353"+
    "\40\0\1\u044a\62\0\1\u03dc\50\0\1\u044b\40\0\1\u044c"+
    "\50\0\1\u03a6\77\0\1\u01d7\25\0\1\u044d\56\0\1\u044e"+
    "\53\0\1\u015d\47\0\1\u044f\71\0\1\u03f8\27\0\1\u0450"+
    "\5\0\1\u0451\44\0\1\u0452\5\0\1\u0453\11\0\1\u0454"+
    "\34\0\1\u0455\64\0\1\u02c2\61\0\1\u0282\33\0\1\357"+
    "\47\0\1\u0456\55\0\1\u0134\75\0\1\u0457\23\0\1\112"+
    "\70\0\1\u0458\54\0\1\u0459\42\0\1\u045a\46\0\1\u045b"+
    "\47\0\1\u045c\61\0\1\u026b\62\0\1\u045d\24\0\1\322"+
    "\2\0\3\322\1\u0254\1\u045e\36\322\2\0\4\322\2\0"+
    "\3\322\1\u045f\37\322\2\0\4\322\2\0\3\322\1\u0254"+
    "\17\322\1\u0460\17\322\2\0\4\322\2\0\3\322\1\u0254"+
    "\1\u0461\36\322\2\0\3\322\33\0\1\u0462\30\0\1\u0463"+
    "\10\0\1\u0123\42\0\1\u0464\50\0\1\u0465\56\0\1\u0466"+
    "\53\0\1\u02db\45\0\1\u0467\66\0\1\u0468\34\0\1\u0469"+
    "\73\0\1\u046a\53\0\1\u046b\31\0\1\u0105\55\0\1\u046c"+
    "\66\0\1\u026b\36\0\1\u03f7\16\0\1\u03f8\27\0\1\u046d"+
    "\67\0\1\u046e\45\0\1\u046f\72\0\1\u0470\23\0\1\u0471"+
    "\71\0\1\u0472\54\0\1\u0473\33\0\1\u01c9\55\0\1\u0474"+
    "\14\0\1\u03f8\34\0\1\u0475\53\0\1\u0476\67\0\1\244"+
    "\36\0\1\u0477\51\0\1\u01e4\56\0\1\u0478\53\0\1\u0479"+
    "\40\0\1\u047a\63\0\1\u047b\44\0\1\u047c\57\0\1\u047d"+
    "\61\0\1\u047e\33\0\1\u0200\2\0\1\u0105\66\0\1\u047f"+
    "\47\0\1\u02ac\47\0\1\u0480\46\0\1\u026a\3\0\1\u0411"+
    "\40\0\1\u0481\53\0\1\374\65\0\1\u0482\46\0\1\u0483"+
    "\46\0\1\u0227\46\0\1\u0484\53\0\1\u01c0\57\0\1\u03a3"+
    "\71\0\1\u0485\41\0\1\u0486\36\0\1\u01e0\62\0\1\u0487"+
    "\46\0\1\u01ca\46\0\1\u0488\75\0\1\u01b6\27\0\1\u0489"+
    "\61\0\1\u048a\47\0\1\u0282\67\0\1\u0319\45\0\1\u045c"+
    "\56\0\1\u048b\63\0\1\u048c\42\0\1\u0441\43\0\1\u0134"+
    "\44\0\1\u048d\46\0\1\u048e\54\0\1\u0400\57\0\1\u048f"+
    "\53\0\1\u0490\50\0\1\u0491\71\0\1\u0492\27\0\1\u02be"+
    "\50\0\1\u0163\74\0\1\u0200\32\0\1\u0493\51\0\1\u0494"+
    "\66\0\1\u03ca\44\0\1\u0495\63\0\1\u03f6\54\0\1\u03a2"+
    "\36\0\1\u01ca\45\0\1\54\66\0\1\u0105\36\0\1\u013f"+
    "\63\0\1\u01e4\56\0\1\u0496\42\0\1\u02de\53\0\1\u03a6"+
    "\47\0\1\u0497\77\0\1\u0498\41\0\1\u0499\37\0\1\u049a"+
    "\67\0\1\u010d\34\0\1\u02e5\3\0\1\u0288\42\0\1\u049b"+
    "\64\0\1\u049c\71\0\1\u049d\25\0\1\u049e\52\0\1\u049f"+
    "\66\0\1\u04a0\46\0\1\u04a1\45\0\1\u04a2\74\0\1\u04a3"+
    "\41\0\1\u01b6\55\0\1\u04a4\27\0\1\u040b\74\0\1\u04a5"+
    "\35\0\1\u02ac\57\0\1\u01b6\41\0\1\u04a6\55\0\1\u04a7"+
    "\55\0\1\u04a8\51\0\1\u033c\52\0\1\u04a9\50\0\1\u04aa"+
    "\64\0\1\u04a6\36\0\1\314\1\0\1\u02e5\3\0\1\u0288"+
    "\47\0\1\u02b0\57\0\1\u04ab\62\0\1\u04ac\61\0\1\u0363"+
    "\52\0\1\u04ad\21\0\1\u02b8\63\0\1\u01b6\55\0\1\u0400"+
    "\50\0\1\u0464\41\0\1\u04ae\70\0\1\u02cb\53\0\1\u02d1"+
    "\52\0\1\u04af\34\0\1\u04b0\100\0\1\u04b1\32\0\1\u04b2"+
    "\42\0\1\u04b3\64\0\1\u04b4\56\0\1\u04b5\40\0\1\u04b6"+
    "\57\0\1\u04b7\46\0\1\u01e0\76\0\1\u04b8\31\0\1\u04b9"+
    "\56\0\1\u04ba\42\0\1\u04bb\46\0\1\u04bc\17\0\1\u034f"+
    "\34\0\1\u04bd\54\0\1\u01ea\56\0\1\u04be\46\0\1\u04bf"+
    "\52\0\1\u03a2\70\0\1\u02ac\44\0\1\u01e8\46\0\1\u0288"+
    "\25\0\1\u04c0\30\0\1\u04c1\43\0\1\u04c2\65\0\1\u04c3"+
    "\44\0\1\u0494\41\0\1\u04c4\55\0\1\u04c5\60\0\1\u04c6"+
    "\60\0\1\u04c7\24\0\1\u0440\2\0\3\u0440\1\u04c8\37\u0440"+
    "\2\0\3\u0440\14\0\1\u03c8\45\0\1\u0376\56\0\1\u01b6"+
    "\67\0\1\u04c9\55\0\1\54\30\0\1\u04ca\64\0\1\u04cb"+
    "\35\0\1\u04cc\103\0\1\u04cd\25\0\1\u04ce\56\0\1\353"+
    "\54\0\1\u032b\44\0\1\u04cf\47\0\1\u04d0\63\0\1\u04d1"+
    "\47\0\1\u01ad\52\0\1\u04d2\73\0\1\u01ad\52\0\1\u0145"+
    "\24\0\1\u04d3\53\0\1\u03a6\1\u03f7\46\0\1\u04d4\70\0"+
    "\1\u04d5\46\0\1\54\53\0\1\54\47\0\1\357\43\0"+
    "\1\u01c9\53\0\1\u04d6\60\0\1\u04d7\34\0\1\322\2\0"+
    "\3\322\1\u04d8\37\322\2\0\4\322\2\0\3\322\1\u0254"+
    "\7\322\1\u0391\11\322\1\u04d9\15\322\2\0\4\322\2\0"+
    "\3\322\1\u0254\15\322\1\u04da\21\322\2\0\4\322\2\0"+
    "\3\322\1\u0254\21\322\1\u04db\15\322\2\0\3\322\20\0"+
    "\1\u04dc\60\0\1\u04dd\52\0\1\u020d\36\0\1\u04de\62\0"+
    "\1\u04df\44\0\1\u0370\66\0\1\u04e0\32\0\1\u04e1\56\0"+
    "\1\u04e2\52\0\1\u04e3\56\0\1\u04e4\62\0\1\u04e5\30\0"+
    "\1\u04e6\44\0\1\322\2\0\43\322\2\0\3\322\12\0"+
    "\1\u04e7\62\0\1\u04e8\37\0\1\u04e9\54\0\1\u02db\53\0"+
    "\1\u0297\46\0\1\u04ea\62\0\1\u01e0\52\0\1\u02db\46\0"+
    "\1\u04eb\66\0\1\u04ec\54\0\1\u04ed\30\0\1\u04ee\64\0"+
    "\1\u04ef\46\0\1\u04f0\46\0\1\u0227\62\0\1\u01e8\32\0"+
    "\1\u04f1\2\0\43\u04f1\2\0\3\u04f1\7\0\1\u0226\101\0"+
    "\1\u011f\42\0\1\u04ef\51\0\1\u0200\47\0\1\u04f2\40\0"+
    "\1\357\51\0\1\u04f3\56\0\1\u04f4\53\0\1\u011d\44\0"+
    "\1\u042a\64\0\1\u04f5\54\0\1\u02da\45\0\1\u04ef\51\0"+
    "\1\u04f6\50\0\1\u04b2\50\0\1\u04f7\54\0\1\u04f8\73\0"+
    "\1\u04f9\25\0\1\u04fa\64\0\1\u04fb\41\0\1\u04fc\52\0"+
    "\1\u04fd\1\u04fe\1\0\1\u04ff\3\0\1\u0500\7\0\1\u0501"+
    "\4\0\1\u0502\36\0\1\244\44\0\1\u01b6\64\0\1\u01e8"+
    "\41\0\1\107\67\0\1\u0503\43\0\1\u04b2\50\0\1\u0504"+
    "\46\0\1\u0505\52\0\1\u0400\62\0\1\u0506\57\0\1\u0507"+
    "\62\0\1\u0508\33\0\1\u0509\62\0\1\244\45\0\1\u02ca"+
    "\41\0\1\u050a\1\0\1\u050b\51\0\1\u050c\56\0\1\u050d"+
    "\3\0\1\u041a\43\0\1\u041a\14\0\1\u0105\45\0\1\u050e"+
    "\46\0\1\u050f\46\0\1\u0510\64\0\1\u0511\52\0\1\244"+
    "\36\0\1\u0512\71\0\1\u01e8\47\0\1\u04b0\33\0\1\u0513"+
    "\102\0\1\u0514\27\0\1\u042c\64\0\1\u0515\36\0\1\u0516"+
    "\76\0\1\u0517\53\0\1\u0518\36\0\1\u01ad\40\0\1\u026b"+
    "\53\0\1\u0519\56\0\1\u0276\63\0\1\u051a\31\0\1\u01c5"+
    "\52\0\1\u051b\66\0\1\u051c\52\0\1\u051d\46\0\1\u051e"+
    "\50\0\1\u051f\45\0\1\u0520\43\0\1\u0440\2\0\3\u0440"+
    "\1\u04c8\1\u0521\36\u0440\2\0\3\u0440\12\0\1\u0522\66\0"+
    "\1\u0523\32\0\1\u0524\103\0\1\u0525\23\0\1\u0526\64\0"+
    "\1\u0527\50\0\1\u0200\62\0\1\u04b0\45\0\1\u0528\44\0"+
    "\1\u0289\45\0\1\u0289\64\0\1\u02ac\42\0\1\u0524\46\0"+
    "\1\u0529\54\0\1\u024e\42\0\1\322\2\0\3\322\1\u0254"+
    "\7\322\1\u0391\5\322\1\u052a\21\322\2\0\4\322\2\0"+
    "\3\322\1\u0254\15\322\1\u052b\21\322\2\0\4\322\2\0"+
    "\3\322\1\u0254\21\322\1\u052c\15\322\2\0\4\322\2\0"+
    "\3\322\1\u0254\30\322\1\u052d\6\322\2\0\3\322\26\0"+
    "\1\u052e\51\0\1\u02b0\40\0\1\u0487\61\0\1\u04b0\41\0"+
    "\1\u04f8\67\0\1\u0154\32\0\1\u052f\53\0\1\u02b0\43\0"+
    "\1\u0530\2\0\43\u0530\2\0\3\u0530\24\0\1\u03c8\42\0"+
    "\1\u0531\45\0\1\u0532\74\0\1\u0533\33\0\1\u0534\62\0"+
    "\1\u0535\46\0\1\u0536\44\0\1\u0537\71\0\1\u0538\41\0"+
    "\1\u01e8\67\0\1\u0385\17\0\1\u04f1\2\0\23\u04f1\1\u0539"+
    "\17\u04f1\2\0\3\u04f1\26\0\1\u053a\61\0\1\u053b\27\0"+
    "\1\u04e2\54\0\1\u053c\46\0\1\u053d\54\0\1\u053e\62\0"+
    "\1\u03b4\50\0\1\u03b4\42\0\1\u011d\56\0\1\u0501\47\0"+
    "\1\u053f\5\0\1\u0540\47\0\1\u0541\50\0\1\u0542\1\0"+
    "\1\u0543\45\0\1\u0237\57\0\1\u0544\11\0\1\u0545\50\0"+
    "\1\u0546\35\0\1\u0547\63\0\1\u0548\44\0\1\u0549\52\0"+
    "\1\u054a\53\0\1\u054b\45\0\1\u054c\61\0\1\u04b2\44\0"+
    "\1\u054d\57\0\1\u041a\64\0\1\u032b\32\0\1\u054e\52\0"+
    "\1\u03b4\57\0\1\357\62\0\1\u054f\47\0\1\u0276\47\0"+
    "\1\u0550\50\0\1\u0551\72\0\1\u03f6\31\0\1\u0552\57\0"+
    "\1\u0553\53\0\1\u0554\50\0\1\u019d\50\0\1\u01b6\67\0"+
    "\1\u0555\37\0\1\u04aa\72\0\1\u0200\32\0\1\u0556\34\0"+
    "\1\u0440\2\0\3\u0440\1\u04c8\6\u0440\1\u0557\30\u0440\2\0"+
    "\3\u0440\37\0\1\u0558\34\0\1\u0559\53\0\1\u03c8\51\0"+
    "\1\u055a\57\0\1\u055b\57\0\1\u0492\2\0\1\u0517\42\0"+
    "\1\u055c\33\0\1\u0487\43\0\1\322\2\0\3\322\1\u0254"+
    "\1\322\1\u055d\35\322\2\0\4\322\2\0\3\322\1\u0254"+
    "\7\322\1\u055e\27\322\2\0\4\322\2\0\3\322\1\u0254"+
    "\2\322\1\u0391\34\322\2\0\4\322\2\0\3\322\1\u055f"+
    "\37\322\2\0\3\322\23\0\1\u02db\36\0\1\u0400\43\0"+
    "\1\u0530\2\0\4\u0530\1\u0560\36\u0530\2\0\3\u0530\15\0"+
    "\1\357\74\0\1\u0561\13\0\1\u0562\2\0\43\u0562\2\0"+
    "\3\u0562\20\0\1\u0563\71\0\1\u0282\31\0\1\u0200\42\0"+
    "\1\u0564\60\0\1\u0327\36\0\1\u04f1\2\0\15\u04f1\1\u0565"+
    "\5\u04f1\1\u0539\17\u04f1\2\0\3\u04f1\17\0\1\u0319\45\0"+
    "\1\54\53\0\1\u03c8\53\0\1\u0566\75\0\1\u0567\33\0"+
    "\1\u0568\60\0\1\374\54\0\1\u0569\60\0\1\u029a\46\0"+
    "\1\374\56\0\1\u0237\40\0\1\u056a\61\0\1\u056b\25\0"+
    "\1\u056c\72\0\1\u0400\42\0\1\u056d\42\0\1\u0154\72\0"+
    "\1\u056e\45\0\1\u035f\61\0\1\u04b2\42\0\1\u0531\42\0"+
    "\1\u056f\62\0\1\u0570\60\0\1\u0571\42\0\1\u0492\62\0"+
    "\1\u0572\40\0\1\u0573\36\0\1\u0574\2\0\43\u0574\2\0"+
    "\3\u0574\10\0\1\u0575\55\0\1\u0576\60\0\1\372\45\0"+
    "\1\u04a6\56\0\1\u0577\32\0\1\322\2\0\3\322\1\u0254"+
    "\7\322\1\u0578\27\322\2\0\3\322\1\u0530\2\0\4\u0530"+
    "\1\u0560\16\u0530\1\u0579\17\u0530\2\0\3\u0530\14\0\1\u057a"+
    "\36\0\1\u0562\2\0\24\u0562\1\u057b\16\u0562\2\0\3\u0562"+
    "\1\u057c\2\0\43\u057c\2\0\3\u057c\23\0\1\u0303\55\0"+
    "\1\u057d\52\0\1\u057a\36\0\1\u0237\51\0\1\u057e\61\0"+
    "\1\374\65\0\1\u057f\44\0\1\54\43\0\1\u053e\62\0"+
    "\1\u0147\52\0\1\u0580\36\0\1\u0581\47\0\1\u0582\63\0"+
    "\1\u0484\41\0\1\u0583\43\0\1\u0574\2\0\24\u0574\1\u0584"+
    "\16\u0574\2\0\3\u0574\20\0\1\u0585\60\0\1\u0586\36\0"+
    "\1\u0276\40\0\1\u0530\2\0\4\u0530\1\u0560\10\u0530\1\u0587"+
    "\25\u0530\2\0\3\u0530\33\0\1\u04f8\17\0\1\u0562\2\0"+
    "\21\u0562\1\u0588\2\u0562\1\u057b\16\u0562\2\0\3\u0562\1\u057c"+
    "\2\0\5\u057c\1\u0589\35\u057c\2\0\3\u057c\7\0\1\u058a"+
    "\53\0\1\374\50\0\1\u04df\67\0\1\u058b\44\0\1\374"+
    "\45\0\1\u058c\72\0\1\u058d\22\0\1\u0574\2\0\21\u0574"+
    "\1\u058e\2\u0574\1\u0584\16\u0574\2\0\3\u0574\14\0\1\u058f"+
    "\60\0\1\u0590\30\0\1\u0562\2\0\5\u0562\1\u0591\16\u0562"+
    "\1\u057b\16\u0562\2\0\3\u0562\1\u057c\2\0\5\u057c\1\u0589"+
    "\1\u0592\34\u057c\2\0\3\u057c\37\0\1\u0593\21\0\1\u0311"+
    "\64\0\1\u0594\76\0\1\u0595\6\0\1\u0574\2\0\5\u0574"+
    "\1\u0596\16\u0574\1\u0584\16\u0574\2\0\3\u0574\13\0\1\u0469"+
    "\61\0\1\u0597\30\0\1\u0562\2\0\24\u0562\1\u057b\7\u0562"+
    "\1\u0598\6\u0562\2\0\3\u0562\1\u057c\2\0\3\u057c\1\u0599"+
    "\1\u057c\1\u0589\35\u057c\2\0\3\u057c\10\0\1\u059a\50\0"+
    "\1\u059b\73\0\1\u059c\23\0\1\u059d\2\0\43\u059d\2\0"+
    "\3\u059d\12\0\1\u059e\40\0\1\u0562\2\0\3\u0562\1\u059f"+
    "\20\u0562\1\u057b\16\u0562\2\0\3\u0562\1\u057c\2\0\4\u057c"+
    "\1\u05a0\1\u0589\35\u057c\2\0\3\u057c\26\0\1\u0276\44\0"+
    "\1\u05a1\56\0\1\u05a2\26\0\1\u059d\2\0\3\u059d\1\u05a3"+
    "\37\u059d\2\0\3\u059d\13\0\1\u0163\37\0\1\u0562\2\0"+
    "\17\u0562\1\u05a4\4\u0562\1\u057b\16\u0562\2\0\3\u0562\31\0"+
    "\1\u04ef\35\0\1\u05a5\36\0\1\u059d\2\0\3\u059d\1\u05a3"+
    "\7\u059d\1\u05a6\27\u059d\2\0\3\u059d\1\u0562\2\0\13\u0562"+
    "\1\u05a7\10\u0562\1\u057b\16\u0562\2\0\3\u0562\22\0\1\u05a8"+
    "\30\0\1\u059d\2\0\3\u059d\1\u05a3\30\u059d\1\u05a9\6\u059d"+
    "\2\0\3\u059d\1\u0562\2\0\23\u0562\1\u05aa\1\u057b\16\u0562"+
    "\2\0\3\u0562\15\0\1\u0116\35\0\1\u059d\2\0\3\u059d"+
    "\1\u05a3\10\u059d\1\u05ab\26\u059d\2\0\4\u059d\2\0\3\u059d"+
    "\1\u05a3\3\u059d\1\u05ac\33\u059d\2\0\4\u059d\2\0\3\u059d"+
    "\1\u05a3\13\u059d\1\u05ad\23\u059d\2\0\4\u059d\2\0\3\u059d"+
    "\1\u05a3\13\u059d\1\u05ae\23\u059d\2\0\3\u059d";

  private static int [] zzUnpackTrans() {
    int [] result = new int[59125];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\2\11\31\1\1\11\2\1\2\11"+
    "\2\1\3\0\1\1\4\0\1\1\17\0\1\1\1\0"+
    "\1\1\26\0\2\1\1\0\1\1\6\0\1\1\22\0"+
    "\1\1\27\0\1\1\3\0\1\1\1\0\1\1\1\0"+
    "\1\1\5\0\1\1\4\0\1\1\4\0\1\11\1\1"+
    "\2\0\1\1\5\0\1\11\5\0\1\1\23\0\1\1"+
    "\1\0\1\11\1\0\1\11\14\0\1\11\21\0\1\11"+
    "\3\0\1\11\1\0\1\1\3\0\1\1\3\0\1\1"+
    "\2\0\1\11\10\0\1\11\1\0\2\11\2\0\1\1"+
    "\1\0\2\1\1\11\2\0\1\1\3\0\1\11\1\1"+
    "\4\0\1\1\14\0\1\1\23\0\1\1\15\0\1\1"+
    "\13\0\1\11\5\0\1\11\10\0\1\11\14\0\1\1"+
    "\5\0\1\1\1\0\1\1\5\0\2\1\23\0\1\1"+
    "\4\0\1\1\1\11\5\0\1\1\10\0\1\1\12\0"+
    "\1\11\3\0\1\1\14\0\1\1\22\0\1\1\15\0"+
    "\1\11\10\0\1\1\11\0\1\1\2\0\1\1\5\0"+
    "\2\1\5\0\1\1\10\0\1\1\27\0\1\1\22\0"+
    "\1\1\53\0\1\11\3\0\1\1\4\0\3\11\2\0"+
    "\1\1\1\11\3\0\1\1\10\0\1\1\1\11\24\0"+
    "\1\1\2\0\1\1\5\0\1\1\25\0\2\1\14\0"+
    "\1\11\16\0\1\11\1\0\1\11\16\0\1\1\16\0"+
    "\1\1\15\0\1\11\1\1\1\11\27\0\1\1\1\0"+
    "\1\1\15\0\1\1\2\0\1\1\5\0\1\1\15\0"+
    "\2\1\3\0\1\1\10\0\1\1\15\0\1\1\17\0"+
    "\1\1\1\0\1\1\1\0\1\1\11\0\1\1\16\0"+
    "\1\1\5\0\1\1\12\0\1\11\3\0\1\11\7\0"+
    "\1\1\23\0\1\1\6\0\1\1\7\0\1\1\27\0"+
    "\2\1\13\0\1\11\1\0\1\1\3\0\1\1\27\0"+
    "\1\1\65\0\1\1\107\0\1\11\37\0\1\11\10\0"+
    "\1\1\27\0\1\1\33\0\1\11\10\0\1\11\3\0"+
    "\1\1\31\0\1\11\2\0\1\1\75\0\1\1\3\0"+
    "\1\11\1\0\2\1\6\0\1\1\22\0\1\1\16\0"+
    "\1\1\30\0\1\1\11\0\1\1\3\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1454];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    /*  Generamos un java_cup.Symbol para guardar el tipo de token 
        encontrado */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    
    /* Generamos un Symbol para el tipo de token encontrado 
       junto con su valor */
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalizadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  AnalizadorLexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 132) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { System.out.println("Token ilegal <"+yytext()+">");
          }
        case 50: break;
        case 2: 
          { /* ignora el espacio */
          }
        case 51: break;
        case 3: 
          { System.out.print(yytext()); 
                      return symbol(sym.ENTERO, new Integer(yytext()));
          }
        case 52: break;
        case 4: 
          { System.out.println("ART_INDEFI"); return symbol(sym.ART_INDEFI);
          }
        case 53: break;
        case 5: 
          { System.out.println("ADJ_POSESIV"); return symbol(sym.ADJ_POSESIV);
          }
        case 54: break;
        case 6: 
          { System.out.println("SIG_PUNT"); return symbol(sym.SIG_PUNT);
          }
        case 55: break;
        case 7: 
          { System.out.println("INTERRO"); return symbol(sym.INTERRO);
          }
        case 56: break;
        case 8: 
          { System.out.print(" + ");
                          return symbol(sym.OP_SUMA);
          }
        case 57: break;
        case 9: 
          { System.out.println("PREP_LUG"); return symbol(sym.PREP_LUG);
          }
        case 58: break;
        case 10: 
          { System.out.println("CONJ_SUBORCAUS"); return symbol(sym.CONJ_SUBORCAUS);
          }
        case 59: break;
        case 11: 
          { System.out.println("AUX_PRESEN"); return symbol(sym.AUX_PRESEN);
          }
        case 60: break;
        case 12: 
          { System.out.println("PREP_MOV"); return symbol(sym.PREP_MOV);
          }
        case 61: break;
        case 13: 
          { System.out.println("ADJ_PROPERSO"); return symbol(sym.ADJ_PROPERSO);
          }
        case 62: break;
        case 14: 
          { System.out.println("PREP_MOD"); return symbol(sym.PREP_MOD);
          }
        case 63: break;
        case 15: 
          { System.out.println("AUXPRESP"); return symbol(sym.AUXPRESP);
          }
        case 64: break;
        case 16: 
          { System.out.println("CONJ_COORDISYU"); return symbol(sym.CONJ_COORDISYU);
          }
        case 65: break;
        case 17: 
          { System.out.println("ANIMALS"); return symbol(sym.ANIMALS);
          }
        case 66: break;
        case 18: 
          { System.out.println("VERBO_PRESENT"); return symbol(sym.VERBO_PRESENT);
          }
        case 67: break;
        case 19: 
          { System.out.println("CONJ_COORCOPU"); return symbol(sym.CONJ_COORCOPU);
          }
        case 68: break;
        case 20: 
          { System.out.println("VERBO_PASADOSIMP"); return symbol(sym.VERBO_PASADOSIMP);
          }
        case 69: break;
        case 21: 
          { System.out.println("ADJ_CALIFI"); return symbol(sym.ADJ_CALIFI);
          }
        case 70: break;
        case 22: 
          { System.out.println("PROF"); return symbol(sym.PROF);
          }
        case 71: break;
        case 23: 
          { System.out.println("NO"); return symbol(sym.NO);
          }
        case 72: break;
        case 24: 
          { System.out.println("ART_DEFI"); return symbol(sym.ART_DEFI);
          }
        case 73: break;
        case 25: 
          { System.out.println("ADJ_NUMCARDIN"); return symbol(sym.ADJ_NUMCARDIN);
          }
        case 74: break;
        case 26: 
          { System.out.println("SUS_COMUN"); return symbol(sym.SUS_COMUN);
          }
        case 75: break;
        case 27: 
          { System.out.println("AUXPASPP"); return symbol(sym.AUXPASPP);
          }
        case 76: break;
        case 28: 
          { System.out.println("AUXPPS"); return symbol(sym.AUXPPS);
          }
        case 77: break;
        case 29: 
          { System.out.println("ADJ_PROPOSESIV"); return symbol(sym.ADJ_PROPOSESIV);
          }
        case 78: break;
        case 30: 
          { System.out.println("ADJ_PROINTERR"); return symbol(sym.ADJ_PROINTERR);
          }
        case 79: break;
        case 31: 
          { System.out.println("AUXPASP"); return symbol(sym.AUXPASP);
          }
        case 80: break;
        case 32: 
          { System.out.println("WEATH"); return symbol(sym.WEATH);
          }
        case 81: break;
        case 33: 
          { System.out.println("VERBO_PASADOPARTICI"); return symbol(sym.VERBO_PASADOPARTICI);
          }
        case 82: break;
        case 34: 
          { System.out.println("AUX_PAS"); return symbol(sym.AUX_PAS);
          }
        case 83: break;
        case 35: 
          { System.out.println("VEGET"); return symbol(sym.VEGET);
          }
        case 84: break;
        case 36: 
          { System.out.println("PAIS"); return symbol(sym.PAIS);
          }
        case 85: break;
        case 37: 
          { System.out.println("CONJ_COORADVERV"); return symbol(sym.CONJ_COORADVERV);
          }
        case 86: break;
        case 38: 
          { System.out.println("CONJ_CONJSUBOCOMPARA"); return symbol(sym.CONJ_CONJSUBOCOMPARA);
          }
        case 87: break;
        case 39: 
          { System.out.println("ADJ_DEMOS"); return symbol(sym.ADJ_DEMOS);
          }
        case 88: break;
        case 40: 
          { System.out.println("CONJ_CONJSUBOCONSEC"); return symbol(sym.CONJ_CONJSUBOCONSEC);
          }
        case 89: break;
        case 41: 
          { System.out.println("VERBO_PRESENTS"); return symbol(sym.VERBO_PRESENTS);
          }
        case 90: break;
        case 42: 
          { System.out.println("CONJ_CONJSUBOCONCES"); return symbol(sym.CONJ_CONJSUBOCONCES);
          }
        case 91: break;
        case 43: 
          { System.out.println("SUS_ABSTRACT"); return symbol(sym.SUS_ABSTRACT);
          }
        case 92: break;
        case 44: 
          { System.out.println("WILL"); return symbol(sym.WILL);
          }
        case 93: break;
        case 45: 
          { System.out.println("PREP_TIEM"); return symbol(sym.PREP_TIEM);
          }
        case 94: break;
        case 46: 
          { System.out.println("ADJ_NUMORD"); return symbol(sym.ADJ_NUMORD);
          }
        case 95: break;
        case 47: 
          { System.out.println("ADJ_PROREFLEX"); return symbol(sym.ADJ_PROREFLEX);
          }
        case 96: break;
        case 48: 
          { System.out.println("CONJ_SUBORDISYU"); return symbol(sym.CONJ_SUBORDISYU);
          }
        case 97: break;
        case 49: 
          { System.out.println("GOING"); return symbol(sym.GOING);
          }
        case 98: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
