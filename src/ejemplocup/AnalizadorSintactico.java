
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 17 15:06:51 CST 2018
//----------------------------------------------------

package ejemplocup;

import java_cup.runtime.*;
import java.io.FileReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 17 15:06:51 CST 2018
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\005\006\000\002\004\005\000\002\007\007\000\002\006" +
    "\007\000\002\010\005\000\002\011\007\000\002\012\007" +
    "\000\002\013\006\000\002\014\007\000\002\015\007\000" +
    "\002\016\007\000\002\017\010\000\002\020\010\000\002" +
    "\021\007\000\002\022\010\000\002\023\010\000\002\024" +
    "\006\000\002\025\007\000\002\026\007\000\002\027\006" +
    "\000\002\030\007\000\002\031\007\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\033\003\000\002\033\003\000\002\034" +
    "\003\000\002\034\003\000\002\035\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\154\000\034\013\007\014\uffc9\015\uffc9\023\uffc9\050" +
    "\030\051\034\053\uffc9\056\uffc9\057\024\060\016\063\032" +
    "\065\031\066\033\001\002\000\036\002\ufff1\013\ufff1\014" +
    "\ufff1\015\ufff1\023\ufff1\050\ufff1\051\ufff1\053\ufff1\056\ufff1" +
    "\057\ufff1\060\ufff1\063\ufff1\065\ufff1\066\ufff1\001\002\000" +
    "\036\002\ufff7\013\ufff7\014\ufff7\015\ufff7\023\ufff7\050\ufff7" +
    "\051\ufff7\053\ufff7\056\ufff7\057\ufff7\060\ufff7\063\ufff7\065" +
    "\ufff7\066\ufff7\001\002\000\036\002\ufff0\013\ufff0\014\ufff0" +
    "\015\ufff0\023\ufff0\050\ufff0\051\ufff0\053\ufff0\056\ufff0\057" +
    "\ufff0\060\ufff0\063\ufff0\065\ufff0\066\ufff0\001\002\000\014" +
    "\014\uffcc\015\uffcc\023\uffcc\053\uffcc\056\uffcc\001\002\000" +
    "\036\002\ufffb\013\ufffb\014\ufffb\015\ufffb\023\ufffb\050\ufffb" +
    "\051\ufffb\053\ufffb\056\ufffb\057\ufffb\060\ufffb\063\ufffb\065" +
    "\ufffb\066\ufffb\001\002\000\036\002\uffff\013\uffff\014\uffff" +
    "\015\uffff\023\uffff\050\uffff\051\uffff\053\uffff\056\uffff\057" +
    "\uffff\060\uffff\063\uffff\065\uffff\066\uffff\001\002\000\036" +
    "\002\ufffc\013\ufffc\014\ufffc\015\ufffc\023\ufffc\050\ufffc\051" +
    "\ufffc\053\ufffc\056\ufffc\057\ufffc\060\ufffc\063\ufffc\065\ufffc" +
    "\066\ufffc\001\002\000\036\002\uffef\013\uffef\014\uffef\015" +
    "\uffef\023\uffef\050\uffef\051\uffef\053\uffef\056\uffef\057\uffef" +
    "\060\uffef\063\uffef\065\uffef\066\uffef\001\002\000\036\002" +
    "\uffee\013\uffee\014\uffee\015\uffee\023\uffee\050\uffee\051\uffee" +
    "\053\uffee\056\uffee\057\uffee\060\uffee\063\uffee\065\uffee\066" +
    "\uffee\001\002\000\036\002\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\023\uffe9\050\uffe9\051\uffe9\053\uffe9\056\uffe9\057\uffe9\060" +
    "\uffe9\063\uffe9\065\uffe9\066\uffe9\001\002\000\016\013\007" +
    "\014\uffc9\015\uffc9\023\uffc9\053\uffc9\056\uffc9\001\002\000" +
    "\036\002\uffea\013\uffea\014\uffea\015\uffea\023\uffea\050\uffea" +
    "\051\uffea\053\uffea\056\uffea\057\uffea\060\uffea\063\uffea\065" +
    "\uffea\066\uffea\001\002\000\036\002\ufff3\013\ufff3\014\ufff3" +
    "\015\ufff3\023\ufff3\050\ufff3\051\ufff3\053\ufff3\056\ufff3\057" +
    "\ufff3\060\ufff3\063\ufff3\065\ufff3\066\ufff3\001\002\000\036" +
    "\002\ufff4\013\ufff4\014\ufff4\015\ufff4\023\ufff4\050\ufff4\051" +
    "\ufff4\053\ufff4\056\ufff4\057\ufff4\060\ufff4\063\ufff4\065\ufff4" +
    "\066\ufff4\001\002\000\036\002\ufffd\013\ufffd\014\ufffd\015" +
    "\ufffd\023\ufffd\050\ufffd\051\ufffd\053\ufffd\056\ufffd\057\ufffd" +
    "\060\ufffd\063\ufffd\065\ufffd\066\ufffd\001\002\000\014\014" +
    "\uffcd\015\uffcd\023\uffcd\053\uffcd\056\uffcd\001\002\000\016" +
    "\013\007\014\uffc9\015\uffc9\023\uffc9\053\uffc9\056\uffc9\001" +
    "\002\000\036\002\ufffa\013\ufffa\014\ufffa\015\ufffa\023\ufffa" +
    "\050\ufffa\051\ufffa\053\ufffa\056\ufffa\057\ufffa\060\ufffa\063" +
    "\ufffa\065\ufffa\066\ufffa\001\002\000\036\002\uffeb\013\uffeb" +
    "\014\uffeb\015\uffeb\023\uffeb\050\uffeb\051\uffeb\053\uffeb\056" +
    "\uffeb\057\uffeb\060\uffeb\063\uffeb\065\uffeb\066\uffeb\001\002" +
    "\000\036\002\ufffe\013\ufffe\014\ufffe\015\ufffe\023\ufffe\050" +
    "\ufffe\051\ufffe\053\ufffe\056\ufffe\057\ufffe\060\ufffe\063\ufffe" +
    "\065\ufffe\066\ufffe\001\002\000\016\013\007\014\uffc9\015" +
    "\uffc9\023\uffc9\053\uffc9\056\uffc9\001\002\000\016\013\007" +
    "\014\uffc9\015\uffc9\023\uffc9\053\uffc9\056\uffc9\001\002\000" +
    "\016\013\007\014\uffc9\015\uffc9\023\uffc9\053\uffc9\056\uffc9" +
    "\001\002\000\016\013\007\014\uffc9\015\uffc9\023\uffc9\053" +
    "\uffc9\056\uffc9\001\002\000\016\013\007\014\uffc9\015\uffc9" +
    "\023\uffc9\053\uffc9\056\uffc9\001\002\000\036\002\ufff2\013" +
    "\ufff2\014\ufff2\015\ufff2\023\ufff2\050\ufff2\051\ufff2\053\ufff2" +
    "\056\ufff2\057\ufff2\060\ufff2\063\ufff2\065\ufff2\066\ufff2\001" +
    "\002\000\036\002\120\013\007\014\uffc9\015\uffc9\023\uffc9" +
    "\050\030\051\034\053\uffc9\056\uffc9\057\024\060\016\063" +
    "\032\065\031\066\033\001\002\000\036\002\ufff5\013\ufff5" +
    "\014\ufff5\015\ufff5\023\ufff5\050\ufff5\051\ufff5\053\ufff5\056" +
    "\ufff5\057\ufff5\060\ufff5\063\ufff5\065\ufff5\066\ufff5\001\002" +
    "\000\036\002\uffec\013\uffec\014\uffec\015\uffec\023\uffec\050" +
    "\uffec\051\uffec\053\uffec\056\uffec\057\uffec\060\uffec\063\uffec" +
    "\065\uffec\066\uffec\001\002\000\036\002\ufff6\013\ufff6\014" +
    "\ufff6\015\ufff6\023\ufff6\050\ufff6\051\ufff6\053\ufff6\056\ufff6" +
    "\057\ufff6\060\ufff6\063\ufff6\065\ufff6\066\ufff6\001\002\000" +
    "\036\002\uffed\013\uffed\014\uffed\015\uffed\023\uffed\050\uffed" +
    "\051\uffed\053\uffed\056\uffed\057\uffed\060\uffed\063\uffed\065" +
    "\uffed\066\uffed\001\002\000\036\002\ufff8\013\ufff8\014\ufff8" +
    "\015\ufff8\023\ufff8\050\ufff8\051\ufff8\053\ufff8\056\ufff8\057" +
    "\ufff8\060\ufff8\063\ufff8\065\ufff8\066\ufff8\001\002\000\036" +
    "\002\ufff9\013\ufff9\014\ufff9\015\ufff9\023\ufff9\050\ufff9\051" +
    "\ufff9\053\ufff9\056\ufff9\057\ufff9\060\ufff9\063\ufff9\065\ufff9" +
    "\066\ufff9\001\002\000\014\014\053\015\046\023\052\053" +
    "\050\056\047\001\002\000\032\034\uffd0\035\uffd0\036\uffd0" +
    "\037\uffd0\050\uffd0\051\uffd0\057\uffd0\060\uffd0\063\uffd0\064" +
    "\uffd0\065\uffd0\066\uffd0\001\002\000\032\034\uffcf\035\uffcf" +
    "\036\uffcf\037\uffcf\050\uffcf\051\uffcf\057\uffcf\060\uffcf\063" +
    "\uffcf\064\uffcf\065\uffcf\066\uffcf\001\002\000\032\034\uffce" +
    "\035\uffce\036\uffce\037\uffce\050\uffce\051\uffce\057\uffce\060" +
    "\uffce\063\uffce\064\uffce\065\uffce\066\uffce\001\002\000\026" +
    "\034\066\035\063\036\055\050\056\051\054\057\065\060" +
    "\064\063\061\065\060\066\057\001\002\000\032\034\uffd2" +
    "\035\uffd2\036\uffd2\037\uffd2\050\uffd2\051\uffd2\057\uffd2\060" +
    "\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2\001\002\000\032" +
    "\034\uffd1\035\uffd1\036\uffd1\037\uffd1\050\uffd1\051\uffd1\057" +
    "\uffd1\060\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\001\002" +
    "\000\006\062\113\064\112\001\002\000\036\002\uffe4\013" +
    "\uffe4\014\uffe4\015\uffe4\023\uffe4\050\uffe4\051\uffe4\053\uffe4" +
    "\056\uffe4\057\uffe4\060\uffe4\063\uffe4\065\uffe4\066\uffe4\001" +
    "\002\000\006\062\106\064\105\001\002\000\006\037\102" +
    "\062\103\001\002\000\006\037\077\062\100\001\002\000" +
    "\006\034\074\062\075\001\002\000\040\002\uffe7\013\uffe7" +
    "\014\uffe7\015\uffe7\020\073\023\uffe7\050\uffe7\051\uffe7\053" +
    "\uffe7\056\uffe7\057\uffe7\060\uffe7\063\uffe7\065\uffe7\066\uffe7" +
    "\001\002\000\040\002\uffca\013\uffca\014\uffca\015\uffca\020" +
    "\uffca\023\uffca\050\uffca\051\uffca\053\uffca\056\uffca\057\uffca" +
    "\060\uffca\063\uffca\065\uffca\066\uffca\001\002\000\004\062" +
    "\071\001\002\000\004\062\067\001\002\000\040\002\uffcb" +
    "\013\uffcb\014\uffcb\015\uffcb\020\uffcb\023\uffcb\050\uffcb\051" +
    "\uffcb\053\uffcb\056\uffcb\057\uffcb\060\uffcb\063\uffcb\065\uffcb" +
    "\066\uffcb\001\002\000\004\034\070\001\002\000\036\002" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\023\uffe5\050\uffe5\051\uffe5" +
    "\053\uffe5\056\uffe5\057\uffe5\060\uffe5\063\uffe5\065\uffe5\066" +
    "\uffe5\001\002\000\004\034\072\001\002\000\036\002\uffe2" +
    "\013\uffe2\014\uffe2\015\uffe2\023\uffe2\050\uffe2\051\uffe2\053" +
    "\uffe2\056\uffe2\057\uffe2\060\uffe2\063\uffe2\065\uffe2\066\uffe2" +
    "\001\002\000\036\002\uffe8\013\uffe8\014\uffe8\015\uffe8\023" +
    "\uffe8\050\uffe8\051\uffe8\053\uffe8\056\uffe8\057\uffe8\060\uffe8" +
    "\063\uffe8\065\uffe8\066\uffe8\001\002\000\036\002\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\023\uffe1\050\uffe1\051\uffe1\053\uffe1" +
    "\056\uffe1\057\uffe1\060\uffe1\063\uffe1\065\uffe1\066\uffe1\001" +
    "\002\000\004\034\076\001\002\000\036\002\uffdf\013\uffdf" +
    "\014\uffdf\015\uffdf\023\uffdf\050\uffdf\051\uffdf\053\uffdf\056" +
    "\uffdf\057\uffdf\060\uffdf\063\uffdf\065\uffdf\066\uffdf\001\002" +
    "\000\036\002\uffd8\013\uffd8\014\uffd8\015\uffd8\023\uffd8\050" +
    "\uffd8\051\uffd8\053\uffd8\056\uffd8\057\uffd8\060\uffd8\063\uffd8" +
    "\065\uffd8\066\uffd8\001\002\000\004\037\101\001\002\000" +
    "\036\002\uffd6\013\uffd6\014\uffd6\015\uffd6\023\uffd6\050\uffd6" +
    "\051\uffd6\053\uffd6\056\uffd6\057\uffd6\060\uffd6\063\uffd6\065" +
    "\uffd6\066\uffd6\001\002\000\036\002\uffd5\013\uffd5\014\uffd5" +
    "\015\uffd5\023\uffd5\050\uffd5\051\uffd5\053\uffd5\056\uffd5\057" +
    "\uffd5\060\uffd5\063\uffd5\065\uffd5\066\uffd5\001\002\000\004" +
    "\037\104\001\002\000\036\002\uffd3\013\uffd3\014\uffd3\015" +
    "\uffd3\023\uffd3\050\uffd3\051\uffd3\053\uffd3\056\uffd3\057\uffd3" +
    "\060\uffd3\063\uffd3\065\uffd3\066\uffd3\001\002\000\004\034" +
    "\111\001\002\000\004\064\107\001\002\000\004\034\110" +
    "\001\002\000\036\002\uffdc\013\uffdc\014\uffdc\015\uffdc\023" +
    "\uffdc\050\uffdc\051\uffdc\053\uffdc\056\uffdc\057\uffdc\060\uffdc" +
    "\063\uffdc\065\uffdc\066\uffdc\001\002\000\036\002\uffde\013" +
    "\uffde\014\uffde\015\uffde\023\uffde\050\uffde\051\uffde\053\uffde" +
    "\056\uffde\057\uffde\060\uffde\063\uffde\065\uffde\066\uffde\001" +
    "\002\000\004\034\116\001\002\000\004\064\114\001\002" +
    "\000\004\034\115\001\002\000\036\002\uffd9\013\uffd9\014" +
    "\uffd9\015\uffd9\023\uffd9\050\uffd9\051\uffd9\053\uffd9\056\uffd9" +
    "\057\uffd9\060\uffd9\063\uffd9\065\uffd9\066\uffd9\001\002\000" +
    "\036\002\uffdb\013\uffdb\014\uffdb\015\uffdb\023\uffdb\050\uffdb" +
    "\051\uffdb\053\uffdb\056\uffdb\057\uffdb\060\uffdb\063\uffdb\065" +
    "\uffdb\066\uffdb\001\002\000\036\002\001\013\001\014\001" +
    "\015\001\023\001\050\001\051\001\053\001\056\001\057" +
    "\001\060\001\063\001\065\001\066\001\001\002\000\004" +
    "\002\000\001\002\000\014\014\053\015\046\023\052\053" +
    "\050\056\047\001\002\000\004\064\123\001\002\000\004" +
    "\034\124\001\002\000\004\061\125\001\002\000\036\002" +
    "\uffda\013\uffda\014\uffda\015\uffda\023\uffda\050\uffda\051\uffda" +
    "\053\uffda\056\uffda\057\uffda\060\uffda\063\uffda\065\uffda\066" +
    "\uffda\001\002\000\014\014\053\015\046\023\052\053\050" +
    "\056\047\001\002\000\004\037\130\001\002\000\004\061" +
    "\131\001\002\000\036\002\uffd4\013\uffd4\014\uffd4\015\uffd4" +
    "\023\uffd4\050\uffd4\051\uffd4\053\uffd4\056\uffd4\057\uffd4\060" +
    "\uffd4\063\uffd4\065\uffd4\066\uffd4\001\002\000\014\014\053" +
    "\015\046\023\052\053\050\056\047\001\002\000\004\034" +
    "\134\001\002\000\004\061\135\001\002\000\036\002\uffe0" +
    "\013\uffe0\014\uffe0\015\uffe0\023\uffe0\050\uffe0\051\uffe0\053" +
    "\uffe0\056\uffe0\057\uffe0\060\uffe0\063\uffe0\065\uffe0\066\uffe0" +
    "\001\002\000\014\014\053\015\046\023\052\053\050\056" +
    "\047\001\002\000\004\037\140\001\002\000\004\061\141" +
    "\001\002\000\036\002\uffd7\013\uffd7\014\uffd7\015\uffd7\023" +
    "\uffd7\050\uffd7\051\uffd7\053\uffd7\056\uffd7\057\uffd7\060\uffd7" +
    "\063\uffd7\065\uffd7\066\uffd7\001\002\000\014\014\053\015" +
    "\046\023\052\053\050\056\047\001\002\000\004\064\144" +
    "\001\002\000\004\034\145\001\002\000\004\061\146\001" +
    "\002\000\036\002\uffdd\013\uffdd\014\uffdd\015\uffdd\023\uffdd" +
    "\050\uffdd\051\uffdd\053\uffdd\056\uffdd\057\uffdd\060\uffdd\063" +
    "\uffdd\065\uffdd\066\uffdd\001\002\000\014\014\053\015\046" +
    "\023\052\053\050\056\047\001\002\000\004\034\151\001" +
    "\002\000\004\061\152\001\002\000\036\002\uffe6\013\uffe6" +
    "\014\uffe6\015\uffe6\023\uffe6\050\uffe6\051\uffe6\053\uffe6\056" +
    "\uffe6\057\uffe6\060\uffe6\063\uffe6\065\uffe6\066\uffe6\001\002" +
    "\000\014\014\053\015\046\023\052\053\050\056\047\001" +
    "\002\000\004\034\155\001\002\000\004\061\156\001\002" +
    "\000\036\002\uffe3\013\uffe3\014\uffe3\015\uffe3\023\uffe3\050" +
    "\uffe3\051\uffe3\053\uffe3\056\uffe3\057\uffe3\060\uffe3\063\uffe3" +
    "\065\uffe3\066\uffe3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\154\000\066\002\035\003\010\004\026\005\021\006" +
    "\007\007\011\010\024\011\043\012\042\013\004\014\040" +
    "\015\036\016\020\017\017\020\034\021\003\022\005\023" +
    "\012\024\013\025\041\026\037\027\025\030\016\031\014" +
    "\033\044\035\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\033\152\035\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\033\146" +
    "\035\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\033\141\035\022\001\001\000\006" +
    "\033\135\035\022\001\001\000\006\033\131\035\022\001" +
    "\001\000\006\033\125\035\022\001\001\000\006\033\120" +
    "\035\022\001\001\000\002\001\001\000\064\003\116\004" +
    "\026\005\021\006\007\007\011\010\024\011\043\012\042" +
    "\013\004\014\040\015\036\016\020\017\017\020\034\021" +
    "\003\022\005\023\012\024\013\025\041\026\037\027\025" +
    "\030\016\031\014\033\044\035\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            AnalizadorSintactico asin = new AnalizadorSintactico(
                    new AnalizadorLexico( new FileReader(args[0])));
            Object result = asin.parse().value;
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // empty ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("empty",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // verbop ::= VERBO_PRESENTS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("verbop",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // verbop ::= VERBO_PRESENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("verbop",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // art ::= ART_DEFI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("art",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // art ::= empty 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("art",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sub ::= PROF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sub",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sub ::= ANIMALS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sub",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sub ::= SUS_COMUN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sub",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sub ::= SUS_ABSTRACT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sub",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sub ::= ADJ_PROPERSO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sub",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // paspneg ::= art sub AUXPASPP NO VERBO_PASADOPARTICI 
            {
              Object RESULT =null;
		System.out.println("PASPNEG");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("paspneg",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // paspint ::= AUXPASPP art sub VERBO_PASADOPARTICI INTERRO 
            {
              Object RESULT =null;
		System.out.println("PASPINT");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("paspint",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // paspaf ::= art sub AUXPASPP VERBO_PASADOPARTICI 
            {
              Object RESULT =null;
		System.out.println("PASPAF");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("paspaf",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ppneg ::= art sub AUXPPS NO VERBO_PASADOPARTICI 
            {
              Object RESULT =null;
		System.out.println("PPSNEG");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ppneg",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ppint ::= AUXPPS art sub VERBO_PASADOPARTICI INTERRO 
            {
              Object RESULT =null;
		System.out.println("PPSINT");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ppint",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ppsaf ::= art sub AUXPPS VERBO_PASADOPARTICI 
            {
              Object RESULT =null;
		System.out.println("PPSAF");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ppsaf",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // goingnegpas ::= art sub AUX_PAS NO GOING VERBO_PRESENT 
            {
              Object RESULT =null;
		System.out.println("GOINGANEGPAS");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("goingnegpas",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // goingintpas ::= AUX_PAS art sub GOING VERBO_PRESENT INTERRO 
            {
              Object RESULT =null;
		System.out.println("GOINGINTPAS");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("goingintpas",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // goingafpas ::= art sub AUX_PAS GOING VERBO_PRESENT 
            {
              Object RESULT =null;
		System.out.println("GOINGAFPAS");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("goingafpas",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // goingnegp ::= art sub AUX_PRESEN NO GOING VERBO_PRESENT 
            {
              Object RESULT =null;
		System.out.println("GOINGANEGP");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("goingnegp",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // goingintp ::= AUX_PRESEN art sub GOING VERBO_PRESENT INTERRO 
            {
              Object RESULT =null;
		System.out.println("GOINGINTP");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("goingintp",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // goingafp ::= art sub AUX_PRESEN GOING VERBO_PRESENT 
            {
              Object RESULT =null;
		System.out.println("GOINGAFP");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("goingafp",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // futureneg ::= art sub WILL NO VERBO_PRESENT 
            {
              Object RESULT =null;
		System.out.println("FUTURENEG");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("futureneg",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // futureint ::= WILL art sub VERBO_PRESENT INTERRO 
            {
              Object RESULT =null;
		System.out.println("FUTUREINT");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("futureint",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // futureaf ::= art sub WILL VERBO_PRESENT 
            {
              Object RESULT =null;
		System.out.println("FUTUREAF");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("futureaf",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // simplepastneg ::= art sub AUXPASP NO VERBO_PRESENT 
            {
              Object RESULT =null;
		System.out.println("SIMPLEPASTNEG");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("simplepastneg",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // simplepastint ::= AUXPASP art sub VERBO_PRESENT INTERRO 
            {
              Object RESULT =null;
		System.out.println("SIMPLEPASTINT");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("simplepastint",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // subverbpas ::= art sub VERBO_PASADOSIMP 
            {
              Object RESULT =null;
		System.out.println("SUBVERBPAS");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("subverbpas",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // simplepresentneg ::= art sub AUXPRESP NO VERBO_PRESENT 
            {
              Object RESULT =null;
		System.out.println("SIMPLEPRESENTNEG");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("simplepresentneg",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // simplepresentint ::= AUXPRESP art sub VERBO_PRESENT INTERRO 
            {
              Object RESULT =null;
		System.out.println("SIMPLEPRESENTINT");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("simplepresentint",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // subverbpre ::= art sub verbop 
            {
              Object RESULT =null;
		System.out.println("SUBVERBPRE");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("subverbpre",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // subverbadj ::= art sub verbop ADJ_CALIFI 
            {
              Object RESULT =null;
		System.out.println("SUBVERBADJ");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("subverbadj",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= paspneg 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= paspint 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= paspaf 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= ppneg 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= ppint 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= ppsaf 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= goingnegpas 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= goingintpas 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= goingafpas 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= goingnegp 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= goingintp 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= goingafp 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= futureneg 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= futureint 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= futureaf 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= simplepastneg 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= simplepastint 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= subverbpas 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= simplepresentneg 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= simplepresentint 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= subverbadj 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= subverbpre 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr_list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr_list ::= expr_list expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

