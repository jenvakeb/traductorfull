/* The following code was generated by JFlex 1.5.0-SNAPSHOT */


/* --------------------------Codigo de Usuario----------------------- */
package ejemplocup;

import java_cup.runtime.*;
import java.io.Reader;
      

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>alexico.flex</tt>
 */
class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\45\1\46\1\1\22\0\1\37\1\40\6\0"+
    "\1\40\1\40\1\40\1\51\1\40\1\43\1\41\1\40\1\4\11\5"+
    "\1\40\1\40\3\0\1\50\1\0\1\6\1\27\1\13\1\15\1\12"+
    "\1\33\1\30\1\11\1\14\1\34\1\25\1\22\1\23\1\7\1\26"+
    "\1\21\1\47\1\20\1\16\1\10\1\24\1\36\1\17\1\32\1\31"+
    "\1\35\1\42\1\0\1\40\35\0\1\40\1\44\1\40\7\0\1\45"+
    "\u1fa2\0\1\45\1\45\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\3\1\4\5\1\1\5\21\1"+
    "\3\6\1\7\1\10\1\4\1\11\3\0\1\12\4\0"+
    "\1\13\17\0\1\14\1\0\1\15\26\0\1\16\1\15"+
    "\1\0\1\13\6\0\1\17\22\0\1\15\27\0\1\15"+
    "\3\0\1\5\1\0\1\15\1\0\1\14\5\0\1\16"+
    "\4\0\1\20\4\0\1\21\1\16\2\0\1\22\5\0"+
    "\1\16\5\0\1\22\23\0\1\21\1\0\1\23\1\0"+
    "\1\24\14\0\1\13\21\0\1\25\3\0\1\26\1\0"+
    "\1\27\3\0\1\30\3\0\1\31\2\0\1\31\10\0"+
    "\1\32\1\0\1\33\1\34\2\0\1\15\1\0\1\22"+
    "\1\24\1\35\2\0\1\15\3\0\1\36\21\0\1\21"+
    "\23\0\1\24\15\0\1\35\13\0\1\37\5\0\1\40"+
    "\10\0\1\41\14\0\1\15\5\0\1\22\1\0\1\22"+
    "\5\0\1\31\23\0\1\42\4\0\2\36\5\0\1\24"+
    "\10\0\1\22\12\0\1\43\3\0\1\21\14\0\1\22"+
    "\22\0\1\24\15\0\1\44\10\0\1\31\11\0\1\5"+
    "\2\0\1\14\5\0\1\22\1\21\5\0\1\24\10\0"+
    "\1\45\25\0\1\15\22\0\1\16\53\0\1\11\3\0"+
    "\1\31\4\0\1\46\1\47\1\50\2\0\2\15\3\0"+
    "\1\32\10\0\1\22\22\0\1\51\2\0\1\22\5\0"+
    "\1\24\25\0\1\21\1\24\14\0\1\52\16\0\1\17"+
    "\1\0\1\14\16\0\1\22\13\0\1\22\13\0\1\42"+
    "\1\16\1\53\27\0\1\32\1\0\1\22\15\0\1\5"+
    "\2\0\1\26\5\0\1\22\15\0\1\11\1\22\3\0"+
    "\1\43\10\0\1\32\13\0\1\22\17\0\1\5\1\0"+
    "\1\32\1\0\1\21\11\0\1\31\16\0\1\46\5\0"+
    "\1\24\12\0\1\54\3\0\1\55\7\0\1\35\22\0"+
    "\1\31\15\0\1\21\27\0\1\52\1\32\13\0\1\12"+
    "\1\0\1\31\3\0\1\22\27\0\1\22\65\0\1\5"+
    "\106\0\1\56\37\0\1\57\10\0\1\32\27\0\1\24"+
    "\33\0\1\45\10\0\1\51\3\0\1\31\31\0\1\20"+
    "\2\0\1\12\75\0\1\23\3\0\1\60\1\0\1\26"+
    "\1\43\6\0\1\20\22\0\1\57\16\0\1\20\30\0"+
    "\1\23\10\0\1\23\3\0\1\23";

  private static int [] zzUnpackAction() {
    int [] result = new int[1436];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\52\0\52\0\176\0\250\0\322"+
    "\0\374\0\u0126\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222"+
    "\0\u024c\0\u0276\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372"+
    "\0\u039c\0\u03c6\0\u03f0\0\u041a\0\u0444\0\u046e\0\52\0\u0498"+
    "\0\u04c2\0\52\0\52\0\u04ec\0\u0516\0\u0540\0\u056a\0\u0594"+
    "\0\u05be\0\u05e8\0\u0612\0\u063c\0\u0666\0\u0690\0\u06ba\0\u06e4"+
    "\0\u070e\0\u0738\0\u0762\0\u078c\0\u07b6\0\u07e0\0\u080a\0\u0834"+
    "\0\u085e\0\u0888\0\u08b2\0\u08dc\0\u0906\0\u0930\0\u095a\0\u0984"+
    "\0\u09ae\0\u09d8\0\u0a02\0\u0a2c\0\u0a56\0\u0a80\0\u0aaa\0\u0ad4"+
    "\0\u0afe\0\u0b28\0\u0b52\0\u0b7c\0\u0ba6\0\u0bd0\0\u0bfa\0\u0c24"+
    "\0\u0c4e\0\u0c78\0\u0ca2\0\u0ccc\0\u0cf6\0\u0d20\0\u0d4a\0\u0d74"+
    "\0\u0d9e\0\u0dc8\0\u0df2\0\u0e1c\0\u0e46\0\u0e70\0\u0e9a\0\u0ec4"+
    "\0\u0eee\0\u0f18\0\u0f42\0\u0f6c\0\u0f96\0\u0fc0\0\u0fea\0\u1014"+
    "\0\u103e\0\u1068\0\u1092\0\u10bc\0\u10e6\0\u1110\0\u113a\0\u1164"+
    "\0\u118e\0\u11b8\0\u11e2\0\u120c\0\u1236\0\u1260\0\u128a\0\u12b4"+
    "\0\u12de\0\u1308\0\u1332\0\u135c\0\u1386\0\u13b0\0\u13da\0\u1404"+
    "\0\u142e\0\u1458\0\u1482\0\u14ac\0\u14d6\0\u1500\0\u152a\0\u1554"+
    "\0\u157e\0\u15a8\0\u15d2\0\u15fc\0\u1626\0\u1650\0\u167a\0\u16a4"+
    "\0\u16ce\0\u16f8\0\u1722\0\u174c\0\u1776\0\u17a0\0\u17ca\0\u17f4"+
    "\0\u181e\0\u1848\0\u1872\0\u189c\0\u18c6\0\u18f0\0\u191a\0\u1944"+
    "\0\u196e\0\u1998\0\u19c2\0\52\0\u19ec\0\u1a16\0\u1a40\0\u1a6a"+
    "\0\u1a94\0\u1abe\0\u1ae8\0\u1b12\0\u1b3c\0\52\0\u1b66\0\u1b90"+
    "\0\u1bba\0\u1be4\0\u1c0e\0\u1c38\0\u1c62\0\u1c8c\0\u1cb6\0\u1ce0"+
    "\0\u1d0a\0\u1d34\0\u1d5e\0\u1d88\0\u1db2\0\u1ddc\0\u1e06\0\u1e30"+
    "\0\u1e5a\0\u1e84\0\u1eae\0\u1ed8\0\u1f02\0\u1f2c\0\u1f56\0\u1f80"+
    "\0\u1faa\0\52\0\u1fd4\0\52\0\u1ffe\0\u2028\0\u2052\0\u207c"+
    "\0\u20a6\0\u20d0\0\u20fa\0\u2124\0\u214e\0\u2178\0\u21a2\0\u21cc"+
    "\0\52\0\u21f6\0\u2220\0\u224a\0\u2274\0\u229e\0\u22c8\0\u22f2"+
    "\0\u231c\0\u2346\0\u2370\0\u239a\0\u23c4\0\u23ee\0\u2418\0\u2442"+
    "\0\u246c\0\u2496\0\52\0\u24c0\0\u24ea\0\u2514\0\52\0\u253e"+
    "\0\u2568\0\u2592\0\u25bc\0\u25e6\0\u2610\0\u263a\0\u2664\0\u268e"+
    "\0\u26b8\0\u26e2\0\u270c\0\52\0\u2736\0\u2760\0\u278a\0\u27b4"+
    "\0\u27de\0\u2808\0\u2832\0\u285c\0\52\0\u2886\0\52\0\52"+
    "\0\u28b0\0\u28da\0\u2904\0\u292e\0\52\0\u2958\0\52\0\u2982"+
    "\0\u29ac\0\u16a4\0\u29d6\0\u2a00\0\u2a2a\0\u2a54\0\u2a7e\0\u2aa8"+
    "\0\u2ad2\0\u2afc\0\u2b26\0\u2b50\0\u2b7a\0\u2ba4\0\u2bce\0\u2bf8"+
    "\0\u2c22\0\u2c4c\0\u2c76\0\u2ca0\0\u2cca\0\u2cf4\0\u2d1e\0\u2d48"+
    "\0\u2d72\0\u2d9c\0\u2dc6\0\u2df0\0\u2e1a\0\u2e44\0\u2e6e\0\u2e98"+
    "\0\u2ec2\0\u2eec\0\u2f16\0\u2f40\0\u2f6a\0\u2f94\0\u2fbe\0\u2fe8"+
    "\0\u3012\0\u303c\0\u3066\0\u3090\0\u30ba\0\u30e4\0\u310e\0\u3138"+
    "\0\u3162\0\u318c\0\u31b6\0\u31e0\0\u320a\0\u3234\0\u325e\0\u3288"+
    "\0\u32b2\0\u32dc\0\u3306\0\u3330\0\u335a\0\u3384\0\u33ae\0\u33d8"+
    "\0\u3402\0\u342c\0\u3456\0\u3480\0\u34aa\0\52\0\u34d4\0\u34fe"+
    "\0\u3528\0\u3552\0\u357c\0\52\0\u35a6\0\u35d0\0\u35fa\0\u3624"+
    "\0\u364e\0\u3678\0\u36a2\0\u36cc\0\52\0\u36f6\0\u3720\0\u374a"+
    "\0\u3774\0\u379e\0\u37c8\0\u37f2\0\u381c\0\u3846\0\u3870\0\u389a"+
    "\0\u38c4\0\u38ee\0\u3918\0\u3942\0\u396c\0\u3996\0\u39c0\0\u39ea"+
    "\0\u3a14\0\u3a3e\0\u3a68\0\u3a92\0\u3abc\0\u3ae6\0\u3b10\0\u3b3a"+
    "\0\u3b64\0\u3b8e\0\u3bb8\0\u3be2\0\u3c0c\0\u3c36\0\u3c60\0\u3c8a"+
    "\0\u3cb4\0\u3cde\0\u3d08\0\u3d32\0\u3d5c\0\u3d86\0\u3db0\0\u3dda"+
    "\0\u3e04\0\u3e2e\0\u3e58\0\u3e82\0\u3eac\0\u3ed6\0\u3f00\0\u3f2a"+
    "\0\u3f54\0\52\0\u3f7e\0\u3fa8\0\u3fd2\0\u3ffc\0\u4026\0\u4050"+
    "\0\u407a\0\u40a4\0\u40ce\0\u40f8\0\u4122\0\u414c\0\u4176\0\u2958"+
    "\0\u0f18\0\u41a0\0\u0516\0\u41ca\0\u41f4\0\u421e\0\u4248\0\u4272"+
    "\0\u429c\0\u42c6\0\u42f0\0\52\0\u431a\0\u4344\0\u436e\0\u4398"+
    "\0\u43c2\0\u43ec\0\u4416\0\u4440\0\u446a\0\u4494\0\u44be\0\u44e8"+
    "\0\u4512\0\u453c\0\u4566\0\u4590\0\u45ba\0\u45e4\0\u460e\0\u4638"+
    "\0\u4662\0\u468c\0\u46b6\0\u46e0\0\u470a\0\u4734\0\u475e\0\u4788"+
    "\0\u47b2\0\u47dc\0\u4806\0\u4830\0\u485a\0\u4884\0\u48ae\0\u48d8"+
    "\0\u4902\0\u492c\0\u4956\0\u4980\0\u49aa\0\u49d4\0\u49fe\0\u4a28"+
    "\0\u4a52\0\u4a7c\0\u32dc\0\u4aa6\0\u4ad0\0\52\0\u4afa\0\u4b24"+
    "\0\u4b4e\0\u4b78\0\u4ba2\0\u4bcc\0\u4bf6\0\u4c20\0\u4c4a\0\u4c74"+
    "\0\u4c9e\0\u4cc8\0\u4cf2\0\u4d1c\0\u4d46\0\u4d70\0\u4d9a\0\u4dc4"+
    "\0\u4dee\0\u4e18\0\u4e42\0\u4e6c\0\u4e96\0\u4ec0\0\u4eea\0\u4f14"+
    "\0\u4f3e\0\u4f68\0\u4f92\0\u4fbc\0\u4fe6\0\u5010\0\u503a\0\u5064"+
    "\0\u508e\0\u50b8\0\u50e2\0\u510c\0\u5136\0\u5160\0\u518a\0\u51b4"+
    "\0\u51de\0\u5208\0\u5232\0\u525c\0\u5286\0\u52b0\0\u52da\0\u5304"+
    "\0\u532e\0\u5358\0\u5382\0\u53ac\0\u53d6\0\u5400\0\u542a\0\u5454"+
    "\0\u547e\0\u54a8\0\u54d2\0\u54fc\0\u5526\0\u5550\0\u557a\0\u55a4"+
    "\0\u55ce\0\u55f8\0\u5622\0\u564c\0\u5676\0\u56a0\0\u56ca\0\u56f4"+
    "\0\u571e\0\u3b3a\0\u5748\0\u5772\0\u579c\0\u57c6\0\u57f0\0\u581a"+
    "\0\u5844\0\u586e\0\u5898\0\u58c2\0\u58ec\0\u5916\0\u5940\0\u596a"+
    "\0\u5994\0\u59be\0\u59e8\0\u5a12\0\u5a3c\0\u5a66\0\u5a90\0\u5aba"+
    "\0\u5ae4\0\u5b0e\0\u5b38\0\u5b62\0\u5b8c\0\u5bb6\0\u5be0\0\u5c0a"+
    "\0\u5c34\0\u5c5e\0\u5c88\0\u5cb2\0\u5cdc\0\u5d06\0\u5d30\0\u5d5a"+
    "\0\u5d84\0\u5dae\0\u5dd8\0\u5e02\0\u5e2c\0\u5e56\0\u5e80\0\u5eaa"+
    "\0\u5ed4\0\u5efe\0\u5f28\0\u5f52\0\u5f7c\0\u5fa6\0\52\0\u5fd0"+
    "\0\u5ffa\0\u6024\0\u604e\0\u6078\0\u60a2\0\u60cc\0\u60f6\0\52"+
    "\0\52\0\52\0\u6120\0\u614a\0\u4dee\0\52\0\u6174\0\u619e"+
    "\0\u61c8\0\u6024\0\u61f2\0\u621c\0\u6246\0\u6270\0\u629a\0\u62c4"+
    "\0\u62ee\0\u6318\0\u6342\0\u636c\0\u6396\0\u63c0\0\u63ea\0\u6414"+
    "\0\u643e\0\u6468\0\u6492\0\u64bc\0\u64e6\0\u6510\0\u653a\0\u6564"+
    "\0\u658e\0\u65b8\0\u65e2\0\u660c\0\u6636\0\u6660\0\u668a\0\u66b4"+
    "\0\u25bc\0\u66de\0\u6708\0\u6732\0\u675c\0\u6786\0\u0aaa\0\u67b0"+
    "\0\u67da\0\u6804\0\u682e\0\u6858\0\u6882\0\u68ac\0\u68d6\0\u6900"+
    "\0\u692a\0\u6954\0\u697e\0\u69a8\0\u69d2\0\u69fc\0\u6a26\0\u4050"+
    "\0\u6a50\0\u6a7a\0\u6aa4\0\u6ace\0\u6af8\0\u6b22\0\u6b4c\0\u6b76"+
    "\0\u6ba0\0\u6bca\0\u6bf4\0\u6c1e\0\u6c48\0\u6c72\0\u6c9c\0\u6cc6"+
    "\0\u6cf0\0\u6d1a\0\52\0\u6d44\0\u6d6e\0\u6d98\0\u6dc2\0\u6dec"+
    "\0\u6e16\0\u6e40\0\u6e6a\0\u6e94\0\u6ebe\0\u6ee8\0\u6f12\0\u6f3c"+
    "\0\u6f66\0\52\0\u6f90\0\52\0\u6fba\0\u6fe4\0\u700e\0\u7038"+
    "\0\u7062\0\u708c\0\u70b6\0\u70e0\0\u710a\0\u7134\0\u715e\0\u3e82"+
    "\0\u7188\0\u71b2\0\u71dc\0\u7206\0\u7230\0\u725a\0\u7284\0\u72ae"+
    "\0\u72d8\0\u7302\0\u732c\0\u7356\0\u7380\0\u73aa\0\u73d4\0\u73fe"+
    "\0\u7428\0\u7452\0\u747c\0\u74a6\0\u74d0\0\u74fa\0\u7524\0\u754e"+
    "\0\u7578\0\u75a2\0\52\0\u06e4\0\52\0\u75cc\0\u75f6\0\u7620"+
    "\0\u764a\0\u7674\0\u769e\0\u76c8\0\u76f2\0\u771c\0\u7746\0\u7770"+
    "\0\u779a\0\u77c4\0\u77ee\0\u7818\0\u7842\0\u786c\0\u7896\0\u78c0"+
    "\0\u78ea\0\u7914\0\u793e\0\u7968\0\u7992\0\u79bc\0\u3f7e\0\u79e6"+
    "\0\u7a10\0\u7a3a\0\u7a64\0\u7a8e\0\u7ab8\0\u7ae2\0\u7b0c\0\u7b36"+
    "\0\u7b60\0\u7b8a\0\u7bb4\0\u7bde\0\u5b38\0\u7c08\0\u7c32\0\u629a"+
    "\0\u7c5c\0\u7c86\0\u7cb0\0\u7cda\0\u7d04\0\u6468\0\u7d2e\0\u7d58"+
    "\0\u7d82\0\u7dac\0\u7dd6\0\u7e00\0\u7e2a\0\u7e54\0\u7e7e\0\u7ea8"+
    "\0\u7ed2\0\u7efc\0\u7f26\0\u7f50\0\u2b26\0\u7f7a\0\u7fa4\0\u7fce"+
    "\0\u2b50\0\u7ff8\0\u8022\0\u804c\0\u8076\0\u80a0\0\u80ca\0\u80f4"+
    "\0\u811e\0\u8148\0\u8172\0\u819c\0\u81c6\0\u81f0\0\u821a\0\u8244"+
    "\0\u826e\0\u8298\0\u82c2\0\u82ec\0\u8316\0\u8340\0\u836a\0\u8394"+
    "\0\u83be\0\u83e8\0\u8412\0\u843c\0\u8466\0\u8490\0\u84ba\0\u84e4"+
    "\0\u850e\0\u8538\0\u8562\0\u858c\0\u85b6\0\u85e0\0\u860a\0\u4ec0"+
    "\0\u8634\0\u865e\0\u8688\0\u86b2\0\u86dc\0\u8706\0\u8730\0\u875a"+
    "\0\u8784\0\u87ae\0\u87d8\0\u8802\0\u882c\0\u8856\0\u8880\0\u88aa"+
    "\0\u88d4\0\u88fe\0\u8928\0\u8952\0\u897c\0\u89a6\0\u89d0\0\u89fa"+
    "\0\u8a24\0\u8a4e\0\u20d0\0\u8a78\0\u8aa2\0\u8acc\0\u8af6\0\u8b20"+
    "\0\u6468\0\u8b4a\0\u8b74\0\u8b9e\0\u8bc8\0\u8bf2\0\u8c1c\0\u8c46"+
    "\0\u8c70\0\u8c9a\0\u8cc4\0\52\0\u8cee\0\u8d18\0\u8d42\0\52"+
    "\0\u8d6c\0\u8d96\0\u8dc0\0\u8dea\0\u8e14\0\u8e3e\0\u8e68\0\u2904"+
    "\0\u8e92\0\u8ebc\0\u8ee6\0\u8f10\0\u8f3a\0\u8f64\0\u8f8e\0\u8fb8"+
    "\0\u8fe2\0\u900c\0\u9036\0\u9060\0\u908a\0\u90b4\0\u90de\0\u9108"+
    "\0\u9132\0\u915c\0\u7356\0\u9186\0\u91b0\0\u91da\0\u9204\0\u922e"+
    "\0\u16f8\0\u9258\0\u9282\0\u92ac\0\u92d6\0\u9300\0\u932a\0\u9354"+
    "\0\u937e\0\u93a8\0\u93d2\0\u93fc\0\u9426\0\u9450\0\u947a\0\u94a4"+
    "\0\u94ce\0\u94f8\0\u9522\0\u954c\0\u9576\0\u95a0\0\u95ca\0\u95f4"+
    "\0\u961e\0\u9648\0\u9672\0\u969c\0\u96c6\0\u96f0\0\u971a\0\u9744"+
    "\0\u3f7e\0\u976e\0\u9798\0\u97c2\0\u97ec\0\u9816\0\u9840\0\u986a"+
    "\0\u9894\0\u98be\0\u98e8\0\u9912\0\u993c\0\52\0\u9966\0\u9990"+
    "\0\u99ba\0\u99e4\0\u9a0e\0\u9a38\0\u9a62\0\u9a8c\0\u9ab6\0\u8148"+
    "\0\u9ae0\0\u9b0a\0\u9b34\0\u9b5e\0\u9b88\0\u9bb2\0\u9bdc\0\u9c06"+
    "\0\u9c30\0\u9c5a\0\u9c84\0\u9cae\0\u9cd8\0\u9d02\0\u9d2c\0\u9d56"+
    "\0\u9d80\0\u9daa\0\u9dd4\0\u9dfe\0\u9e28\0\u9e52\0\u9e7c\0\u9ea6"+
    "\0\u9ed0\0\u9efa\0\u9f24\0\u9f4e\0\u9f78\0\u9fa2\0\u9fcc\0\u9ff6"+
    "\0\ua020\0\ua04a\0\ua074\0\ua09e\0\ua0c8\0\ua0f2\0\ua11c\0\ua146"+
    "\0\ua170\0\ua19a\0\ua1c4\0\ua1ee\0\ua218\0\ua242\0\ua26c\0\ua296"+
    "\0\ua2c0\0\ua2ea\0\ua314\0\ua33e\0\ua368\0\ua392\0\ua3bc\0\ua3e6"+
    "\0\ua410\0\ua43a\0\ua464\0\ua48e\0\ua4b8\0\ua4e2\0\ua50c\0\ua536"+
    "\0\ua560\0\ua58a\0\ua5b4\0\ua5de\0\ua608\0\ua632\0\ua65c\0\ua686"+
    "\0\ua6b0\0\ua6da\0\ua704\0\ua72e\0\ua758\0\ua782\0\ua7ac\0\ua7d6"+
    "\0\ua800\0\ua82a\0\ua854\0\ua87e\0\ua8a8\0\ua8d2\0\ua8fc\0\ua926"+
    "\0\ua950\0\ua97a\0\ua9a4\0\ua9ce\0\ua9f8\0\uaa22\0\uaa4c\0\uaa76"+
    "\0\uaaa0\0\uaaca\0\uaaf4\0\uab1e\0\uab48\0\uab72\0\uab9c\0\uabc6"+
    "\0\uabf0\0\uac1a\0\uac44\0\uac6e\0\uac98\0\uacc2\0\uacec\0\uad16"+
    "\0\uad40\0\uad6a\0\uad94\0\uadbe\0\uade8\0\uae12\0\uae3c\0\uae66"+
    "\0\uae90\0\uaeba\0\uaee4\0\uaf0e\0\uaf38\0\uaf62\0\uaf8c\0\uafb6"+
    "\0\uafe0\0\ub00a\0\ub034\0\ub05e\0\u4398\0\ub088\0\ub0b2\0\ub0dc"+
    "\0\ub106\0\ub130\0\ub15a\0\ub184\0\ub1ae\0\ub1d8\0\ub202\0\ub22c"+
    "\0\52\0\ub256\0\ub280\0\ub2aa\0\ub2d4\0\ub2fe\0\ub328\0\ub352"+
    "\0\ub37c\0\ub3a6\0\ub3d0\0\ub3fa\0\ub424\0\ub44e\0\ub478\0\ub4a2"+
    "\0\ub4cc\0\ub4f6\0\ub520\0\ub54a\0\ub574\0\ub59e\0\ub5c8\0\ub5f2"+
    "\0\ub61c\0\ub646\0\ub670\0\ub69a\0\ub6c4\0\ub6ee\0\ub718\0\ub742"+
    "\0\52\0\ub76c\0\ub796\0\ub7c0\0\ub7ea\0\ub814\0\ub83e\0\ub868"+
    "\0\ub892\0\ub8bc\0\ub8e6\0\ub910\0\ub93a\0\ub964\0\ub98e\0\ub9b8"+
    "\0\ub9e2\0\uba0c\0\uba36\0\uba60\0\uba8a\0\ubab4\0\ubade\0\ubb08"+
    "\0\ubb32\0\ubb5c\0\ubb86\0\ubbb0\0\ubbda\0\ubc04\0\ubc2e\0\ubc58"+
    "\0\ubc82\0\ubcac\0\ubcd6\0\ubd00\0\ubd2a\0\ubd54\0\ubd7e\0\ubda8"+
    "\0\ubdd2\0\ubdfc\0\ube26\0\ube50\0\ube7a\0\ubea4\0\ubece\0\ubef8"+
    "\0\ubf22\0\ubf4c\0\ubf76\0\ubfa0\0\ubfca\0\ubff4\0\uc01e\0\uc048"+
    "\0\uc072\0\uc09c\0\uc0c6\0\uc0f0\0\uc11a\0\52\0\uc144\0\uc16e"+
    "\0\uc198\0\uc1c2\0\uc1ec\0\uc216\0\uc240\0\uc26a\0\52\0\uc294"+
    "\0\uc2be\0\uc2e8\0\u6564\0\uc312\0\uc33c\0\uc366\0\uc390\0\uc3ba"+
    "\0\uc3e4\0\uc40e\0\uc438\0\uc462\0\uc48c\0\uc4b6\0\uc4e0\0\uc50a"+
    "\0\uc534\0\uc55e\0\uc588\0\uc5b2\0\uc5dc\0\uc606\0\uc630\0\uc65a"+
    "\0\uc684\0\uc6ae\0\uc6d8\0\uc702\0\52\0\uc72c\0\uc756\0\ua1c4"+
    "\0\uc780\0\uc7aa\0\uc7d4\0\uc7fe\0\uc828\0\uc852\0\uc87c\0\uc8a6"+
    "\0\uc8d0\0\uc8fa\0\uc924\0\uc94e\0\uc978\0\uc9a2\0\uc9cc\0\uc9f6"+
    "\0\uca20\0\uca4a\0\uca74\0\uca9e\0\ucac8\0\ucaf2\0\ucb1c\0\ucb46"+
    "\0\ucb70\0\ucb9a\0\ucbc4\0\ucbee\0\ucc18\0\ucc42\0\ucc6c\0\ucc96"+
    "\0\uccc0\0\uccea\0\ucd14\0\ucd3e\0\ucd68\0\ucd92\0\ucdbc\0\ucde6"+
    "\0\uce10\0\uce3a\0\uce64\0\uce8e\0\uceb8\0\ucee2\0\ucf0c\0\ucf36"+
    "\0\ucf60\0\ucf8a\0\ucfb4\0\ucfde\0\ud008\0\ud032\0\ud05c\0\ud086"+
    "\0\ud0b0\0\ud0da\0\ud104\0\ud12e\0\ud158\0\ua536\0\ud182\0\ud1ac"+
    "\0\ud1d6\0\52\0\ud200\0\u20d0\0\u20d0\0\ud22a\0\ud254\0\ud27e"+
    "\0\ud2a8\0\ud2d2\0\ud2fc\0\uc16e\0\ud326\0\ud350\0\ud37a\0\ud3a4"+
    "\0\ud3ce\0\ud3f8\0\ud422\0\ud44c\0\ud476\0\ud4a0\0\ud4ca\0\ud4f4"+
    "\0\ud51e\0\ud548\0\ud572\0\ud59c\0\ud5c6\0\ud5f0\0\u20d0\0\ud61a"+
    "\0\ud644\0\ud66e\0\ud698\0\ud6c2\0\ud6ec\0\ud716\0\ud740\0\ud76a"+
    "\0\ud794\0\ud7be\0\ud7e8\0\ud812\0\ud83c\0\ucb1c\0\ud866\0\ud890"+
    "\0\ud8ba\0\ud8e4\0\ud90e\0\ud938\0\ud962\0\ud98c\0\ud9b6\0\ud9e0"+
    "\0\uda0a\0\uda34\0\uda5e\0\uda88\0\udab2\0\udadc\0\udb06\0\udb30"+
    "\0\udb5a\0\udb84\0\udbae\0\udbd8\0\udc02\0\udc2c\0\ud698\0\udc56"+
    "\0\udc80\0\udcaa\0\udcd4\0\udcfe\0\udd28\0\udd52\0\udd7c\0\ud2a8"+
    "\0\udda6\0\uddd0\0\uddfa\0\udbd8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1436];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\2\1\33\1\34\1\35\1\36\1\4\1\37"+
    "\1\40\1\37\1\41\2\2\1\4\1\2\1\42\1\43"+
    "\54\0\1\4\53\0\2\6\53\0\1\44\1\45\2\0"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\2\0\1\60\3\0\1\61\24\0\1\62"+
    "\3\0\1\63\1\0\1\64\7\0\1\65\1\0\1\66"+
    "\31\0\1\67\2\0\1\70\1\71\1\0\1\72\2\0"+
    "\1\73\1\74\3\0\1\75\1\0\1\76\31\0\1\77"+
    "\3\0\1\100\1\0\1\101\7\0\1\102\1\0\1\103"+
    "\2\0\1\104\26\0\1\105\1\106\2\0\1\107\1\110"+
    "\1\111\1\112\4\0\1\113\5\0\1\114\2\0\1\115"+
    "\2\0\1\116\21\0\1\117\2\0\1\120\1\121\1\0"+
    "\1\122\3\0\1\123\1\0\1\124\1\0\1\125\1\0"+
    "\1\126\32\0\1\127\1\130\4\0\1\131\1\132\11\0"+
    "\1\133\27\0\1\134\3\0\1\135\1\0\1\136\3\0"+
    "\1\137\3\0\1\140\1\0\1\141\2\0\1\142\26\0"+
    "\1\143\1\144\1\145\1\146\1\147\1\150\1\151\2\0"+
    "\1\152\1\0\1\153\1\154\1\155\1\156\1\157\1\160"+
    "\20\0\1\161\10\0\1\162\2\0\1\163\1\164\1\0"+
    "\1\165\11\0\1\166\31\0\1\167\2\0\1\170\1\171"+
    "\1\0\1\172\7\0\1\173\1\0\1\174\31\0\1\175"+
    "\2\0\1\176\1\177\1\0\1\200\3\0\1\201\1\0"+
    "\1\202\1\0\1\203\1\0\1\204\2\0\1\205\26\0"+
    "\1\206\3\0\1\207\1\0\1\210\5\0\1\211\3\0"+
    "\1\212\31\0\1\213\3\0\1\214\1\0\1\215\7\0"+
    "\1\216\1\0\1\217\2\0\1\220\27\0\1\221\6\0"+
    "\1\222\1\0\1\223\1\224\36\0\1\225\1\226\2\0"+
    "\1\227\1\0\1\230\11\0\1\231\32\0\1\232\1\233"+
    "\2\0\1\234\2\0\1\235\1\236\1\237\1\0\1\240"+
    "\1\0\1\241\2\0\1\242\1\0\1\243\1\244\1\245"+
    "\2\0\1\246\21\0\1\247\3\0\1\250\1\0\1\251"+
    "\3\0\1\252\1\0\1\253\1\0\1\254\1\0\1\255"+
    "\2\0\1\256\26\0\1\257\3\0\1\260\1\0\1\261"+
    "\3\0\1\262\3\0\1\263\1\0\1\264\35\0\1\265"+
    "\13\0\1\266\31\0\1\267\3\0\1\270\1\0\1\271"+
    "\3\0\1\272\1\0\1\273\1\0\1\274\1\0\1\275"+
    "\35\0\1\276\11\0\1\277\1\0\1\300\35\0\1\301"+
    "\45\0\1\302\3\0\1\303\1\0\1\304\7\0\1\305"+
    "\66\0\1\306\53\0\1\307\16\0\1\310\3\0\1\311"+
    "\1\312\1\313\45\0\1\314\47\0\1\315\2\0\1\316"+
    "\4\0\1\317\51\0\1\320\55\0\1\321\25\0\1\322"+
    "\2\0\5\322\1\323\10\322\1\324\15\322\1\325\5\322"+
    "\2\0\3\322\6\0\1\326\17\0\1\327\33\0\1\330"+
    "\1\0\1\331\1\332\1\333\6\0\1\334\2\0\1\335"+
    "\1\0\1\336\33\0\1\244\47\0\1\337\11\0\1\340"+
    "\1\341\47\0\1\342\57\0\1\343\50\0\1\344\33\0"+
    "\1\345\50\0\1\346\1\347\47\0\1\350\4\0\1\351"+
    "\1\352\2\0\1\353\12\0\1\354\26\0\1\355\3\0"+
    "\1\356\45\0\1\357\10\0\1\360\41\0\1\361\26\0"+
    "\1\362\30\0\1\351\10\0\1\363\30\0\1\364\3\0"+
    "\1\365\1\0\1\366\3\0\1\367\5\0\1\370\32\0"+
    "\1\371\72\0\1\372\33\0\1\373\13\0\1\374\51\0"+
    "\1\375\32\0\1\376\10\0\1\377\37\0\1\u0100\10\0"+
    "\1\u0101\1\u0102\3\0\1\u0103\34\0\1\u0104\1\u0105\3\0"+
    "\1\u0106\1\u0107\1\u0108\4\0\1\243\1\0\1\54\10\0"+
    "\1\u0109\21\0\1\u010a\1\244\10\0\1\u010b\1\0\1\u010c"+
    "\37\0\1\u010d\4\0\1\u010e\1\u010f\2\0\1\u0110\1\u0111"+
    "\1\u0112\35\0\1\u0113\10\0\1\260\2\0\1\u0114\35\0"+
    "\1\u0115\1\u010d\6\0\1\u0116\1\u0117\1\0\1\u0118\1\0"+
    "\1\u0119\37\0\1\u011a\47\0\1\u011b\7\0\1\u0105\7\0"+
    "\1\u011c\51\0\1\u011d\43\0\1\244\53\0\1\u011e\1\0"+
    "\1\u011f\33\0\1\u0120\17\0\1\u0121\51\0\1\u0122\33\0"+
    "\1\u0123\24\0\1\u0124\42\0\1\u0105\54\0\1\u0125\30\0"+
    "\1\u0126\46\0\1\u0127\1\u0128\5\0\1\u0129\1\0\1\u012a"+
    "\1\u012b\1\0\1\u012c\1\u012d\33\0\1\u012e\3\0\1\u012f"+
    "\1\0\1\u0130\11\0\1\u0131\45\0\1\u0132\37\0\1\u0133"+
    "\47\0\1\u0134\3\0\1\u0135\11\0\1\u0136\1\0\1\u0137"+
    "\31\0\1\u0138\3\0\1\u0139\11\0\1\u013a\1\0\1\u013b"+
    "\33\0\1\u013c\2\0\1\u013d\5\0\1\u0105\36\0\1\u013e"+
    "\1\u013f\3\0\1\u0140\2\0\1\u0141\1\244\1\u0142\1\0"+
    "\1\u0143\1\u0144\1\u0145\1\0\1\u0146\1\u0147\40\0\1\u0148"+
    "\20\0\1\u0149\30\0\1\u014a\45\0\1\u014b\55\0\1\u014c"+
    "\3\0\1\u014d\53\0\1\u014e\34\0\1\u014f\14\0\1\u0150"+
    "\4\0\1\u0105\26\0\1\u0151\1\u0152\2\0\1\u0153\1\u0154"+
    "\2\0\1\u0155\50\0\1\u0156\42\0\1\u0157\3\0\1\u0158"+
    "\1\0\1\u0159\7\0\1\u015a\1\0\1\u015b\2\0\1\u015c"+
    "\32\0\1\u015d\1\u015e\4\0\1\u015f\7\0\1\314\30\0"+
    "\1\u0160\2\0\1\u0161\1\u0162\3\0\1\u0163\2\0\1\u0164"+
    "\5\0\1\244\5\0\1\54\43\0\1\u0165\30\0\1\u0166"+
    "\1\314\3\0\1\u010c\2\0\1\314\1\u0167\1\0\1\u0168"+
    "\6\0\1\u010d\26\0\1\u0169\17\0\1\u016a\31\0\1\u016b"+
    "\3\0\1\u016c\1\0\1\u016d\3\0\1\u016e\3\0\1\u016f"+
    "\1\0\1\u0170\31\0\1\u0171\3\0\1\u0172\1\0\1\u0173"+
    "\3\0\1\u0174\3\0\1\260\1\0\1\u0175\31\0\1\u0176"+
    "\1\u0177\1\u010d\1\0\1\u0178\1\u0179\3\0\1\u017a\2\0"+
    "\1\u017b\13\0\1\u017c\24\0\1\u017d\14\0\1\u017e\32\0"+
    "\1\u017f\1\u010d\21\0\1\u0180\31\0\1\u0181\45\0\1\u0182"+
    "\3\0\1\u0183\1\0\1\u0184\3\0\1\u0185\1\0\1\u0186"+
    "\3\0\1\u0187\35\0\1\u0188\1\0\1\u0189\11\0\1\u018a"+
    "\35\0\1\u018b\1\0\1\u018c\44\0\1\u018d\10\0\1\u018e"+
    "\55\0\1\u018f\44\0\1\u010d\2\0\1\u010c\1\0\1\u0190"+
    "\6\0\1\u0191\42\0\1\u0192\35\0\1\u0193\5\0\1\u0194"+
    "\3\0\1\u0195\35\0\1\u0196\3\0\1\u0197\1\0\1\u0198"+
    "\11\0\1\u0199\2\0\1\u019a\27\0\1\u019b\1\u0120\7\0"+
    "\1\u019c\41\0\1\u019d\11\0\1\u019e\47\0\1\u019f\40\0"+
    "\1\u01a0\1\u01a1\2\0\1\u01a2\1\u01a3\12\0\1\u01a4\36\0"+
    "\1\u01a5\43\0\1\u0118\12\0\1\u01a6\6\0\1\u01a7\30\0"+
    "\1\114\5\0\1\u01a8\43\0\1\u01a9\50\0\1\u01aa\6\0"+
    "\2\u01ab\7\0\1\243\32\0\1\u01ac\1\u01ad\3\0\1\u01ae"+
    "\1\0\1\u01af\1\0\1\u01b0\7\0\1\u0122\1\u010d\26\0"+
    "\1\u01b1\17\0\1\u01b2\2\0\1\u01b3\26\0\1\u01b4\1\u01b5"+
    "\10\0\1\u01b6\1\u01b7\60\0\1\u01b8\27\0\1\u01b9\17\0"+
    "\1\u01ba\31\0\1\u01bb\15\0\1\u01bc\35\0\1\314\12\0"+
    "\1\u01bd\46\0\1\u01be\1\0\1\u01bf\37\0\1\u01c0\55\0"+
    "\1\u01c1\1\u01c2\1\0\1\u01c3\5\0\1\u0122\3\0\1\314"+
    "\26\0\1\u01c4\1\u0118\1\u01c5\4\0\1\314\10\0\1\u01c6"+
    "\33\0\1\314\5\0\1\u01c7\7\0\1\u01c8\1\u01c9\1\u01ca"+
    "\2\0\1\u01cb\1\0\1\u01cc\22\0\1\u01cd\61\0\1\u01ce"+
    "\1\0\1\u01cf\6\0\1\243\31\0\1\u01d0\3\0\1\u01d1"+
    "\1\u01d2\1\u01ab\2\0\1\u01d3\2\0\1\u01d4\1\0\1\u01d5"+
    "\2\0\1\u01d6\27\0\1\u01d7\1\0\1\u01d8\1\0\1\260"+
    "\1\u01d9\45\0\1\u01da\6\0\1\u01db\51\0\1\u01dc\42\0"+
    "\1\u01dd\1\u01de\4\0\1\u01df\1\u01e0\1\0\1\u01e1\3\0"+
    "\1\u01e2\43\0\1\u01e3\50\0\1\u01e4\4\0\1\u01e5\35\0"+
    "\1\u01e6\67\0\1\u01e7\53\0\1\u01e8\32\0\1\u01e9\54\0"+
    "\1\u01ea\13\0\1\u01eb\35\0\1\u01ec\6\0\1\u019b\7\0"+
    "\1\u0105\42\0\1\u01ed\35\0\1\u01ee\55\0\1\u01ef\1\0"+
    "\1\u01f0\22\0\1\u01f1\22\0\1\372\1\u01f2\50\0\1\u01f3"+
    "\51\0\1\u01f4\55\0\1\u01f5\5\0\1\244\35\0\1\u01f6"+
    "\30\0\1\u01f7\27\0\1\353\44\0\1\u01f8\7\0\1\u01f9"+
    "\57\0\1\u01fa\41\0\1\u01fb\66\0\1\u01fc\30\0\1\u01fd"+
    "\46\0\1\351\1\244\14\0\1\u01fe\1\0\1\u01ff\1\u0105"+
    "\27\0\1\u0200\1\u0201\1\u0202\1\0\1\u0203\1\u0204\2\0"+
    "\1\u0205\3\0\1\u0206\5\0\1\u0207\2\0\1\u0208\25\0"+
    "\1\u0118\1\u0209\4\0\1\314\2\0\1\u020a\5\0\1\u020b"+
    "\31\0\1\u020c\3\0\1\u020d\1\0\1\u020e\11\0\1\u020f"+
    "\35\0\1\u0210\11\0\1\u0211\1\0\1\u01eb\33\0\1\u0212"+
    "\3\0\1\u0151\1\0\1\u0213\1\0\1\u0214\1\0\1\107"+
    "\6\0\1\u010d\26\0\1\u0215\1\0\1\u0216\7\0\1\u0217"+
    "\1\0\1\u0218\1\0\1\u0219\5\0\1\u0105\27\0\1\u0122"+
    "\7\0\1\u021a\41\0\1\u010d\61\0\1\u021b\15\0\1\u01d5"+
    "\21\0\1\u021c\3\0\1\u021d\1\0\1\u021e\11\0\1\u021f"+
    "\31\0\1\u0220\1\u0105\4\0\1\u0221\14\0\1\u0222\26\0"+
    "\1\u0223\1\u0144\4\0\1\u0224\3\0\1\u0225\1\0\1\u0226"+
    "\3\0\1\u01e2\31\0\1\u0227\67\0\1\u0228\35\0\1\353"+
    "\2\0\1\u0229\4\0\1\u022a\1\0\1\u022b\1\u022c\43\0"+
    "\1\314\4\0\1\u022d\36\0\1\u022e\2\0\1\u022f\3\0"+
    "\1\u0230\1\0\1\u0231\12\0\1\u0232\2\0\1\u0233\25\0"+
    "\1\u0234\11\0\1\u0235\1\0\1\u0236\31\0\1\u0237\3\0"+
    "\1\u0238\13\0\1\u0239\2\0\1\244\30\0\1\u023a\61\0"+
    "\1\u023b\3\0\1\u023c\3\0\1\u015c\40\0\1\u023d\2\0"+
    "\1\u023e\44\0\1\u023f\60\0\1\u0240\2\0\1\u0105\51\0"+
    "\1\u0241\44\0\1\u0242\36\0\1\u0243\64\0\1\u0244\51\0"+
    "\1\u0245\70\0\1\37\53\0\1\u0246\20\0\1\u0247\62\0"+
    "\1\u0248\45\0\1\u0249\52\0\1\u024a\5\0\1\u024b\37\0"+
    "\1\u024c\11\0\1\u024d\51\0\1\u024e\62\0\1\u024f\34\0"+
    "\1\u013e\27\0\1\322\2\0\3\322\1\u0250\36\322\2\0"+
    "\4\322\2\0\3\322\1\u0250\11\322\1\u0251\24\322\2\0"+
    "\4\322\2\0\3\322\1\u0252\36\322\2\0\4\322\2\0"+
    "\3\322\1\u0250\1\322\1\u0253\3\322\1\u0254\5\322\1\u0255"+
    "\22\322\2\0\3\322\25\0\1\u01d5\3\0\1\u0256\45\0"+
    "\1\u0257\40\0\1\u0258\46\0\1\u0259\56\0\1\u025a\41\0"+
    "\1\u025b\61\0\1\u01ab\5\0\1\u025c\37\0\1\u025d\50\0"+
    "\1\u025e\54\0\1\u025f\47\0\1\u0260\50\0\1\u0261\52\0"+
    "\1\u0262\63\0\1\u0263\37\0\1\u0264\46\0\1\u0265\56\0"+
    "\1\u0266\55\0\1\u0267\56\0\1\u0105\34\0\1\u0268\100\0"+
    "\1\u0269\22\0\1\u026a\1\0\1\u026b\45\0\1\u026c\61\0"+
    "\1\u026d\72\0\1\u026e\30\0\1\u026f\55\0\1\u0122\36\0"+
    "\1\u0270\1\u0271\50\0\1\u0272\4\0\1\u0273\1\0\1\u0274"+
    "\4\0\1\u0275\5\0\1\u0276\36\0\1\u0271\1\0\1\u0277"+
    "\43\0\1\u0233\13\0\1\u0278\41\0\1\u0274\5\0\1\u0279"+
    "\35\0\1\u027a\53\0\1\u0153\46\0\1\u027b\12\0\1\u027c"+
    "\71\0\1\u027d\15\0\1\u027e\53\0\1\u011c\14\0\1\u027f"+
    "\41\0\1\244\42\0\1\u0280\1\u0105\52\0\1\u0281\61\0"+
    "\1\u0105\46\0\1\u0105\12\0\1\u010d\41\0\1\u0282\43\0"+
    "\1\u0108\57\0\1\u0283\47\0\1\u010f\50\0\1\314\46\0"+
    "\1\u010d\2\0\1\u011b\55\0\1\u0284\52\0\1\u0105\37\0"+
    "\1\u01fe\17\0\1\314\44\0\1\u0285\43\0\1\u0286\46\0"+
    "\1\u0287\55\0\1\u0122\50\0\1\u010d\52\0\1\u0288\42\0"+
    "\1\u0289\54\0\1\u028a\61\0\1\54\43\0\1\u028b\43\0"+
    "\1\u028c\52\0\1\u028d\53\0\1\u028e\51\0\1\u028f\52\0"+
    "\1\u0105\46\0\1\u0290\3\0\1\u0291\5\0\1\u0292\14\0"+
    "\1\u0293\31\0\1\u0294\45\0\1\u0295\46\0\1\u0296\50\0"+
    "\1\u0297\56\0\1\u0298\46\0\1\u0299\1\u029a\46\0\1\u029b"+
    "\6\0\1\u0105\2\0\1\u029c\1\u029d\40\0\1\u029e\53\0"+
    "\1\u029f\6\0\1\u0105\52\0\1\u02a0\5\0\1\u02a1\35\0"+
    "\1\u0103\4\0\1\u02a2\1\0\1\u02a3\40\0\1\u02a4\10\0"+
    "\1\u02a5\7\0\1\357\31\0\1\u02a6\6\0\1\u02a7\1\u02a8"+
    "\12\0\1\u02a9\31\0\1\u0257\45\0\1\u02aa\70\0\1\u0105"+
    "\47\0\1\244\40\0\1\u02ab\2\0\1\u019b\46\0\1\u02ac"+
    "\46\0\1\u02ad\3\0\1\244\50\0\1\u02ae\41\0\1\u02af"+
    "\52\0\1\u02b0\61\0\1\u02b1\42\0\1\u02b2\65\0\1\u02b3"+
    "\35\0\1\u0105\57\0\1\u02b4\60\0\1\u02b5\34\0\1\u02b6"+
    "\50\0\1\u02b7\64\0\1\u02b8\3\0\1\u02b9\35\0\1\u0165"+
    "\46\0\1\u02ba\67\0\1\357\44\0\1\u0289\6\0\1\u02bb"+
    "\32\0\1\u02bc\1\0\1\u02bd\1\0\1\u02be\43\0\1\u02bf"+
    "\4\0\1\u02c0\2\0\1\u02c1\45\0\1\u02c2\45\0\1\u02c3"+
    "\67\0\1\u02c4\33\0\1\u02c5\51\0\1\u011a\56\0\1\u01fe"+
    "\66\0\1\u02c6\43\0\1\u019b\37\0\1\u02a5\61\0\1\244"+
    "\57\0\1\u02c7\37\0\1\u02c8\4\0\1\u02c9\37\0\1\u02ca"+
    "\7\0\1\u028a\10\0\1\u02cb\27\0\1\u02cc\7\0\1\u02cd"+
    "\1\314\70\0\1\u011b\22\0\1\u02ce\65\0\1\u02cf\12\0"+
    "\1\u01ab\52\0\1\u02d0\37\0\1\244\40\0\1\u02d1\47\0"+
    "\1\u0165\12\0\1\u027f\42\0\1\u02d2\43\0\1\u02d3\50\0"+
    "\1\u02d4\63\0\1\u02d5\55\0\1\314\2\0\1\314\36\0"+
    "\1\u02d6\57\0\1\u02d7\42\0\1\107\10\0\1\54\43\0"+
    "\1\u02d8\41\0\1\u0118\1\347\7\0\1\u027e\37\0\1\u017b"+
    "\52\0\1\u02d9\3\0\1\u02d9\50\0\1\u02da\1\0\1\u02db"+
    "\7\0\1\u02dc\34\0\1\142\5\0\1\u02dd\55\0\1\u0105"+
    "\1\u011b\3\0\1\u02de\43\0\1\u015e\4\0\1\u025a\32\0"+
    "\1\u02df\3\0\1\u02e0\46\0\1\u01d5\11\0\1\u0105\36\0"+
    "\1\u02e1\5\0\1\u02e2\44\0\1\u01ab\1\314\6\0\1\u02e3"+
    "\1\u01ab\5\0\1\u02e4\34\0\1\u02e5\10\0\1\244\14\0"+
    "\1\u02e6\22\0\1\314\4\0\1\u010d\43\0\1\u0165\15\0"+
    "\1\u010d\52\0\1\u02e7\32\0\1\u0165\2\0\1\u010c\61\0"+
    "\1\u010d\41\0\1\u02e8\51\0\1\u02e9\57\0\1\u02ea\44\0"+
    "\1\u02eb\11\0\1\u010d\2\0\1\u010d\31\0\1\u02ec\47\0"+
    "\1\u02df\3\0\1\u02ed\57\0\1\u02ee\37\0\1\u02d9\1\u0118"+
    "\2\0\1\u0118\7\0\1\u017b\36\0\1\u02ef\1\u010d\4\0"+
    "\1\372\4\0\1\u017b\41\0\1\u02f0\1\0\1\u02f1\7\0"+
    "\1\u02f2\41\0\1\260\51\0\1\u02f3\10\0\1\u011b\36\0"+
    "\1\u01ec\6\0\1\u019b\45\0\1\u01d5\44\0\1\u01de\63\0"+
    "\1\u017b\51\0\1\u02c4\54\0\1\u0165\2\0\1\u0165\35\0"+
    "\1\u02f4\44\0\1\u015e\72\0\1\u02a1\31\0\1\353\55\0"+
    "\1\u02f5\47\0\1\u02f6\60\0\1\244\50\0\1\u02f7\1\0"+
    "\1\u0105\2\0\1\u0105\34\0\1\u019a\11\0\1\54\36\0"+
    "\1\u019a\1\u02f8\7\0\1\u02f9\44\0\1\u02fa\54\0\1\u02f9"+
    "\4\0\1\u019a\36\0\1\314\53\0\1\u02fb\50\0\1\u02fc"+
    "\62\0\1\u02fd\52\0\1\244\56\0\1\314\31\0\1\u02fe"+
    "\67\0\1\u02d7\32\0\1\u02d8\71\0\1\u02ff\31\0\1\u0300"+
    "\52\0\1\u0301\47\0\1\u0302\60\0\1\u0105\42\0\1\u0303"+
    "\6\0\1\u0304\42\0\1\u0305\2\0\1\u0105\47\0\1\u01be"+
    "\5\0\1\314\44\0\1\u0306\11\0\1\u0307\35\0\1\u01e7"+
    "\11\0\1\u0308\51\0\1\u0309\41\0\1\u030a\57\0\1\u030b"+
    "\63\0\1\u030c\45\0\1\u01e6\46\0\1\u030d\42\0\1\u02d7"+
    "\56\0\1\u01c8\11\0\1\u030e\47\0\1\u030f\6\0\1\u0310"+
    "\22\0\1\u0122\65\0\1\u0311\47\0\1\u0312\40\0\1\u01fe"+
    "\47\0\1\u0313\5\0\1\u0314\46\0\1\u02d7\47\0\1\u0165"+
    "\5\0\1\314\65\0\1\u0315\51\0\1\u01fe\27\0\1\u010d"+
    "\5\0\1\u010d\2\0\1\u0316\1\u0317\14\0\1\u01d5\23\0"+
    "\1\u0318\62\0\1\u01cc\40\0\1\u02c3\50\0\1\244\62\0"+
    "\1\u0319\42\0\1\260\52\0\1\u031a\45\0\1\u031b\66\0"+
    "\1\u0289\36\0\1\314\1\0\1\u010d\57\0\1\u031c\41\0"+
    "\1\u031d\52\0\1\u031e\62\0\1\u031f\47\0\1\u0320\54\0"+
    "\1\u0321\40\0\1\u010d\45\0\1\u0322\52\0\1\u0317\54\0"+
    "\1\u0323\50\0\1\u0324\52\0\1\u0325\47\0\1\u0326\52\0"+
    "\1\u0327\65\0\1\u0328\35\0\1\244\52\0\1\u0111\106\0"+
    "\1\u0329\14\0\1\u032a\55\0\1\54\45\0\1\350\51\0"+
    "\1\u032b\67\0\1\u032c\30\0\1\u0267\72\0\1\u032d\33\0"+
    "\1\u017b\7\0\1\u019b\46\0\1\u032e\53\0\1\u010d\52\0"+
    "\1\372\51\0\1\u0289\66\0\1\u032f\40\0\1\u0330\33\0"+
    "\1\u0331\53\0\1\u0332\65\0\1\u0333\43\0\1\u0334\40\0"+
    "\1\u0335\51\0\1\u0336\54\0\1\u0337\55\0\1\u0338\51\0"+
    "\1\u0339\71\0\1\u033a\23\0\1\372\55\0\1\u033b\55\0"+
    "\1\u033c\43\0\1\u024b\65\0\1\u02d7\2\0\1\u0105\30\0"+
    "\1\u033d\2\0\1\u033e\4\0\1\u010d\15\0\1\372\23\0"+
    "\1\314\1\0\1\u033f\2\0\1\u010d\53\0\1\u0340\41\0"+
    "\1\u0165\1\u0341\47\0\1\u0342\17\0\1\u0343\37\0\1\u0344"+
    "\51\0\1\u0345\5\0\1\u0105\3\0\1\u0346\31\0\1\u0347"+
    "\5\0\1\u0348\7\0\1\u028a\53\0\1\u0349\33\0\1\u011b"+
    "\1\0\1\u010d\54\0\1\u034a\56\0\1\u034b\45\0\1\u034c"+
    "\41\0\1\u02d9\3\0\1\u034d\2\0\1\314\47\0\1\u034e"+
    "\1\0\1\112\42\0\1\u034f\4\0\1\u0350\10\0\1\u0190"+
    "\1\u0257\36\0\1\u0118\2\0\1\314\1\0\1\314\44\0"+
    "\1\353\47\0\1\u0351\2\0\1\u0352\23\0\1\u0353\23\0"+
    "\1\u0105\2\0\1\u0354\22\0\1\u0355\21\0\1\u0356\6\0"+
    "\1\260\43\0\1\u0105\7\0\1\244\16\0\1\u0357\23\0"+
    "\1\u0358\47\0\1\u0144\2\0\1\314\53\0\1\u0359\44\0"+
    "\1\u010c\20\0\1\u02a1\36\0\1\u035a\4\0\1\u035b\4\0"+
    "\1\u035c\30\0\1\u035d\13\0\1\u0105\45\0\1\u035e\52\0"+
    "\1\314\41\0\1\u0118\61\0\1\u032e\4\0\1\u035f\35\0"+
    "\1\u0360\50\0\1\u0361\50\0\1\u0362\53\0\1\244\50\0"+
    "\1\u0363\56\0\1\u0364\52\0\1\u027e\54\0\1\u02c3\40\0"+
    "\1\u0365\10\0\1\u0366\41\0\1\u0367\1\0\1\u0105\62\0"+
    "\1\u0368\41\0\1\u02d7\6\0\1\u011b\55\0\1\u0369\33\0"+
    "\1\314\11\0\1\314\57\0\1\u02b7\43\0\1\u01aa\40\0"+
    "\1\u036a\52\0\1\u031f\3\0\1\u036b\45\0\1\374\51\0"+
    "\1\u036c\53\0\1\u036d\60\0\1\256\4\0\1\244\4\0"+
    "\1\u01ab\37\0\1\u036e\43\0\1\314\1\0\1\314\51\0"+
    "\1\u028a\1\u02a5\5\0\1\u036f\34\0\1\u0370\50\0\1\u0371"+
    "\16\0\1\u0372\1\u0373\30\0\1\u010c\10\0\1\u0374\7\0"+
    "\1\u02a1\33\0\1\u0375\61\0\1\u0376\57\0\1\u0377\41\0"+
    "\1\u0378\51\0\1\u0289\53\0\1\u0379\41\0\1\u037a\61\0"+
    "\1\u037b\37\0\1\u037c\104\0\1\37\30\0\1\u037d\35\0"+
    "\1\u0111\55\0\1\u0227\51\0\1\u037e\57\0\1\357\46\0"+
    "\1\u037f\60\0\1\u0380\43\0\1\u0381\44\0\1\u0382\40\0"+
    "\1\322\2\0\3\322\1\u0250\7\322\1\u0383\26\322\2\0"+
    "\4\322\2\0\3\322\1\u0250\17\322\1\u0384\16\322\2\0"+
    "\4\322\2\0\3\322\1\u0250\7\322\1\u0383\1\322\1\u0385"+
    "\24\322\2\0\4\322\2\0\3\322\1\u0250\2\322\1\u0386"+
    "\33\322\2\0\4\322\2\0\3\322\1\u0250\24\322\1\u0383"+
    "\11\322\2\0\4\322\2\0\3\322\1\u0250\17\322\1\u0387"+
    "\16\322\2\0\3\322\37\0\1\u0388\24\0\1\u0389\52\0"+
    "\1\u038a\44\0\1\u038b\5\0\1\u038c\47\0\1\u032e\54\0"+
    "\1\u038d\43\0\1\u038e\51\0\1\u038f\70\0\1\u0390\53\0"+
    "\1\u0391\55\0\1\u0289\31\0\1\u0392\55\0\1\u0393\41\0"+
    "\1\256\61\0\1\u0394\62\0\1\357\46\0\1\u0395\34\0"+
    "\1\u0396\50\0\1\u0397\52\0\1\u0398\50\0\1\u0399\61\0"+
    "\1\u039a\43\0\1\u039b\45\0\1\u039c\3\0\1\u039d\13\0"+
    "\1\u039e\51\0\1\u039f\43\0\1\u03a0\43\0\1\u0271\47\0"+
    "\1\u0399\4\0\1\u0398\60\0\1\u03a1\55\0\1\u03a2\31\0"+
    "\1\u03a3\74\0\1\u0290\2\0\1\u0233\27\0\1\u03a4\70\0"+
    "\1\u03a5\30\0\1\u03a6\57\0\1\u03a7\57\0\1\u03a8\40\0"+
    "\1\u03a9\44\0\1\u0105\4\0\1\314\62\0\1\u03aa\37\0"+
    "\1\u03ab\61\0\1\u03ac\63\0\1\u03ad\25\0\1\u03ae\45\0"+
    "\1\244\52\0\1\u0165\51\0\1\u03af\57\0\1\u03b0\62\0"+
    "\1\u03b1\35\0\1\u03b2\47\0\1\u03b3\51\0\1\u026a\51\0"+
    "\1\u03b4\52\0\1\u03b5\52\0\1\u03b6\45\0\1\u03b7\56\0"+
    "\1\u013e\75\0\1\u03b8\27\0\1\u03b9\2\0\1\u03a6\42\0"+
    "\1\u010d\54\0\1\u01fe\45\0\1\u03ba\67\0\1\u02ed\35\0"+
    "\1\u03bb\45\0\1\u03bc\57\0\1\u03bd\46\0\1\u019b\50\0"+
    "\1\u0249\53\0\1\u03be\47\0\1\u03bf\55\0\1\u03c0\62\0"+
    "\1\u03c1\36\0\1\u01e6\60\0\1\u03c2\42\0\1\u01b4\57\0"+
    "\1\u03c3\47\0\1\u01b4\43\0\1\u03c4\67\0\1\u03c5\41\0"+
    "\1\u02c3\42\0\1\u01fe\51\0\1\357\64\0\1\u03c6\52\0"+
    "\1\u03c7\52\0\1\u03c8\45\0\1\u03c9\37\0\1\u03ca\55\0"+
    "\1\u0103\51\0\1\112\62\0\1\u03cb\36\0\1\u03cc\5\0"+
    "\1\u03cd\55\0\1\u01fe\41\0\1\u03ce\52\0\1\u03cf\53\0"+
    "\1\u033a\51\0\1\u03d0\42\0\1\u03d1\64\0\1\u03d2\52\0"+
    "\1\u03d3\41\0\1\u02c3\46\0\1\u01aa\53\0\1\u03d4\60\0"+
    "\1\u03d5\40\0\1\u03d6\56\0\1\u03d7\62\0\1\314\52\0"+
    "\1\u03d8\46\0\1\u03d9\44\0\1\u03da\60\0\1\u0165\36\0"+
    "\1\u03db\47\0\1\u03dc\50\0\1\u03dd\70\0\1\u024b\34\0"+
    "\1\u03de\54\0\1\u03df\63\0\1\u01c8\54\0\1\u015c\45\0"+
    "\1\u010d\32\0\1\u03e0\3\0\1\u013e\54\0\1\u01d5\7\0"+
    "\1\u01d5\37\0\1\u02ce\50\0\1\u03e1\54\0\1\u0165\54\0"+
    "\1\u010d\40\0\1\u02ca\51\0\1\u02d9\13\0\1\u02e0\40\0"+
    "\1\u010c\47\0\1\u010d\14\0\1\314\52\0\1\u03e2\33\0"+
    "\1\u03e3\11\0\1\u03e4\36\0\1\u03e5\51\0\1\u0180\65\0"+
    "\1\u02c4\47\0\1\u03e4\42\0\1\u03e6\50\0\1\u0398\1\u03e7"+
    "\16\0\1\u03e8\30\0\1\u01b4\61\0\1\u03e9\37\0\1\u03ea"+
    "\51\0\1\u0118\52\0\1\u03eb\51\0\1\142\64\0\1\u03ec"+
    "\36\0\1\u03ed\57\0\1\244\2\0\1\u03ee\51\0\1\u03ef"+
    "\55\0\1\u03f0\36\0\1\u03f1\52\0\1\u019a\50\0\1\u019a"+
    "\62\0\1\u03f2\43\0\1\u0223\50\0\1\u03f3\52\0\1\u03f4"+
    "\55\0\1\u03f5\54\0\1\u03b9\34\0\1\u03f6\53\0\1\u03f7"+
    "\61\0\1\u03f8\43\0\1\u03c3\65\0\1\u0223\46\0\1\u03f9"+
    "\54\0\1\u03fa\37\0\1\u03fb\61\0\1\u03de\37\0\1\u03fc"+
    "\53\0\1\u03fd\57\0\1\u03fe\43\0\1\u03ff\64\0\1\u01fe"+
    "\47\0\1\u0400\44\0\1\u03f6\41\0\1\u0401\2\0\1\u0402"+
    "\65\0\1\u0403\31\0\1\u0404\66\0\1\u0405\33\0\1\u0406"+
    "\102\0\1\u0407\32\0\1\u0100\62\0\1\u0408\26\0\1\u0409"+
    "\57\0\1\u01bb\60\0\1\u040a\54\0\1\u040b\31\0\1\u040c"+
    "\100\0\1\u031e\42\0\1\u040d\31\0\1\u040e\51\0\1\u040f"+
    "\17\0\1\u0410\43\0\1\u0411\55\0\1\u0412\53\0\1\u0413"+
    "\41\0\1\u0414\57\0\1\u0415\33\0\1\u0416\54\0\1\u0417"+
    "\47\0\1\u01b4\53\0\1\u0418\60\0\1\u0419\52\0\1\u02f7"+
    "\44\0\1\u041a\65\0\1\u041b\51\0\1\u0211\43\0\1\u041c"+
    "\43\0\1\u02be\47\0\1\u041d\51\0\1\u0267\52\0\1\u041e"+
    "\51\0\1\u041f\47\0\1\u0105\46\0\1\u0420\55\0\1\u0421"+
    "\63\0\1\u0422\50\0\1\u01d5\43\0\1\u0423\47\0\1\u02a7"+
    "\55\0\1\u0267\41\0\1\314\51\0\1\u010d\62\0\1\u0424"+
    "\47\0\1\244\61\0\1\u0425\37\0\1\u0426\52\0\1\u0427"+
    "\61\0\1\u0428\41\0\1\u0429\47\0\1\u042a\50\0\1\u042b"+
    "\50\0\1\u01fe\66\0\1\u042c\32\0\1\u042d\57\0\1\u042e"+
    "\44\0\1\u0165\54\0\1\u042f\36\0\1\u0430\2\0\42\u0430"+
    "\2\0\3\u0430\36\0\1\u0431\25\0\1\u0432\53\0\1\u0433"+
    "\43\0\1\u0434\76\0\1\u0435\34\0\1\u0436\42\0\1\u010c"+
    "\11\0\1\u0105\42\0\1\u0437\51\0\1\u0438\46\0\1\u03b9"+
    "\72\0\1\u0439\43\0\1\u01ee\57\0\1\353\37\0\1\u043a"+
    "\61\0\1\u03cc\47\0\1\u043b\37\0\1\u043c\47\0\1\u0398"+
    "\76\0\1\u01d5\24\0\1\u043d\55\0\1\u043e\52\0\1\u015c"+
    "\46\0\1\u043f\70\0\1\u03e8\26\0\1\u0440\5\0\1\u0441"+
    "\43\0\1\u0442\5\0\1\u0443\11\0\1\u0444\33\0\1\u0445"+
    "\63\0\1\u02bb\60\0\1\u027e\32\0\1\357\46\0\1\u0446"+
    "\54\0\1\u0133\74\0\1\u0447\22\0\1\112\67\0\1\u0448"+
    "\53\0\1\u0449\41\0\1\u044a\45\0\1\u044b\46\0\1\u044c"+
    "\60\0\1\u0267\61\0\1\u044d\23\0\1\322\2\0\3\322"+
    "\1\u0250\1\u044e\35\322\2\0\4\322\2\0\3\322\1\u044f"+
    "\36\322\2\0\4\322\2\0\3\322\1\u0250\17\322\1\u0450"+
    "\16\322\2\0\4\322\2\0\3\322\1\u0250\1\u0451\35\322"+
    "\2\0\3\322\33\0\1\u0452\27\0\1\u0453\10\0\1\u0122"+
    "\41\0\1\u0454\47\0\1\u0455\55\0\1\u0456\52\0\1\u02d4"+
    "\44\0\1\u0457\65\0\1\u0458\33\0\1\u0459\72\0\1\u045a"+
    "\52\0\1\u045b\30\0\1\u0105\54\0\1\u045c\65\0\1\u0267"+
    "\35\0\1\u03e7\16\0\1\u03e8\26\0\1\u045d\66\0\1\u045e"+
    "\44\0\1\u045f\71\0\1\u0460\22\0\1\u0461\70\0\1\u0462"+
    "\53\0\1\u0463\32\0\1\u01c7\54\0\1\u0464\14\0\1\u03e8"+
    "\33\0\1\u0465\52\0\1\u0466\66\0\1\244\35\0\1\u0467"+
    "\50\0\1\u01e2\55\0\1\u0468\52\0\1\u0469\37\0\1\u046a"+
    "\62\0\1\u046b\43\0\1\u046c\56\0\1\u046d\41\0\1\u01fe"+
    "\2\0\1\u0105\65\0\1\u046e\46\0\1\u02a5\46\0\1\u046f"+
    "\45\0\1\u0266\3\0\1\u0401\37\0\1\u0470\52\0\1\374"+
    "\64\0\1\u0471\45\0\1\u0472\41\0\1\u0473\52\0\1\u01be"+
    "\56\0\1\u0395\70\0\1\u0474\40\0\1\u0475\35\0\1\u01de"+
    "\61\0\1\u0476\45\0\1\u01c8\45\0\1\u0477\74\0\1\u01b4"+
    "\26\0\1\u0478\60\0\1\u0479\46\0\1\u027e\66\0\1\u030d"+
    "\44\0\1\u044c\55\0\1\u047a\62\0\1\u047b\41\0\1\u0431"+
    "\42\0\1\u0133\43\0\1\u047c\45\0\1\u047d\53\0\1\u03f0"+
    "\56\0\1\u047e\52\0\1\u047f\47\0\1\u0480\70\0\1\u0481"+
    "\26\0\1\u02b7\47\0\1\u0162\73\0\1\u01fe\31\0\1\u0482"+
    "\50\0\1\u0483\65\0\1\u03ba\43\0\1\u0484\62\0\1\u03e6"+
    "\53\0\1\u0394\35\0\1\u01c8\44\0\1\54\65\0\1\u0105"+
    "\35\0\1\u013e\62\0\1\u01e2\55\0\1\u0485\41\0\1\u02d7"+
    "\52\0\1\u0398\46\0\1\u0486\76\0\1\u0487\40\0\1\u0488"+
    "\36\0\1\u0489\66\0\1\u010d\33\0\1\u02de\45\0\1\u048a"+
    "\63\0\1\u048b\70\0\1\u048c\24\0\1\u048d\51\0\1\u048e"+
    "\65\0\1\u048f\45\0\1\u0490\44\0\1\u0491\73\0\1\u0492"+
    "\40\0\1\u01b4\54\0\1\u0493\26\0\1\u03fb\73\0\1\u0494"+
    "\34\0\1\u02a5\56\0\1\u01b4\40\0\1\u0495\54\0\1\u0496"+
    "\54\0\1\u0497\50\0\1\u0330\51\0\1\u0498\47\0\1\u0499"+
    "\63\0\1\u0495\35\0\1\314\1\0\1\u02de\52\0\1\u02a9"+
    "\56\0\1\u049a\61\0\1\u049b\60\0\1\u0355\51\0\1\u049c"+
    "\20\0\1\u02b1\62\0\1\u01b4\54\0\1\u03f0\47\0\1\u0454"+
    "\40\0\1\u049d\67\0\1\u02c4\52\0\1\u02ca\51\0\1\u049e"+
    "\33\0\1\u049f\77\0\1\u04a0\31\0\1\u04a1\41\0\1\u04a2"+
    "\63\0\1\u04a3\55\0\1\u04a4\37\0\1\u04a5\56\0\1\u04a6"+
    "\45\0\1\u01de\75\0\1\u04a7\30\0\1\u04a8\55\0\1\u04a9"+
    "\41\0\1\u04aa\45\0\1\u04ab\17\0\1\u0343\33\0\1\u04ac"+
    "\53\0\1\u01e8\55\0\1\u04ad\45\0\1\u04ae\51\0\1\u0394"+
    "\67\0\1\u02a5\43\0\1\u01e6\73\0\1\u04af\27\0\1\u04b0"+
    "\42\0\1\u04b1\64\0\1\u04b2\43\0\1\u0483\40\0\1\u04b3"+
    "\54\0\1\u04b4\57\0\1\u04b5\57\0\1\u04b6\23\0\1\u0430"+
    "\2\0\3\u0430\1\u04b7\36\u0430\2\0\3\u0430\14\0\1\u03b9"+
    "\44\0\1\u0368\55\0\1\u01b4\66\0\1\u04b8\54\0\1\54"+
    "\27\0\1\u04b9\63\0\1\u04ba\34\0\1\u04bb\102\0\1\u04bc"+
    "\24\0\1\u04bd\55\0\1\353\53\0\1\u031f\43\0\1\u04be"+
    "\46\0\1\u04bf\62\0\1\u04c0\46\0\1\u01ab\51\0\1\u04c1"+
    "\72\0\1\u01ab\51\0\1\u0144\23\0\1\u04c2\52\0\1\u0398"+
    "\1\u03e7\45\0\1\u04c3\67\0\1\u04c4\45\0\1\54\52\0"+
    "\1\54\46\0\1\357\42\0\1\u01c7\52\0\1\u04c5\57\0"+
    "\1\u04c6\33\0\1\322\2\0\3\322\1\u04c7\36\322\2\0"+
    "\4\322\2\0\3\322\1\u0250\7\322\1\u0383\11\322\1\u04c8"+
    "\14\322\2\0\4\322\2\0\3\322\1\u0250\15\322\1\u04c9"+
    "\20\322\2\0\4\322\2\0\3\322\1\u0250\21\322\1\u04ca"+
    "\14\322\2\0\3\322\20\0\1\u04cb\57\0\1\u04cc\51\0"+
    "\1\u020b\35\0\1\u04cd\61\0\1\u04ce\43\0\1\u0362\65\0"+
    "\1\u04cf\31\0\1\u04d0\55\0\1\u04d1\51\0\1\u04d2\55\0"+
    "\1\u04d3\61\0\1\u04d4\27\0\1\u04d5\43\0\1\322\2\0"+
    "\42\322\2\0\3\322\12\0\1\u04d6\61\0\1\u04d7\36\0"+
    "\1\u04d8\53\0\1\u02d4\52\0\1\u0290\45\0\1\u04d9\61\0"+
    "\1\u01de\51\0\1\u02d4\45\0\1\u04da\65\0\1\u04db\53\0"+
    "\1\u04dc\27\0\1\u04dd\63\0\1\u04de\45\0\1\u04df\55\0"+
    "\1\u01e6\31\0\1\u04e0\2\0\42\u04e0\2\0\3\u04e0\7\0"+
    "\1\u0223\100\0\1\u011e\41\0\1\u04de\50\0\1\u01fe\46\0"+
    "\1\u04e1\37\0\1\357\50\0\1\u04e2\55\0\1\u04e3\52\0"+
    "\1\u011c\43\0\1\u041a\63\0\1\u04e4\53\0\1\u02d3\44\0"+
    "\1\u04de\50\0\1\u04e5\47\0\1\u04a1\47\0\1\u04e6\53\0"+
    "\1\u04e7\72\0\1\u04e8\24\0\1\u04e9\63\0\1\u04ea\40\0"+
    "\1\u04eb\51\0\1\u04ec\1\u04ed\1\0\1\u04ee\3\0\1\u04ef"+
    "\7\0\1\u04f0\4\0\1\u04f1\35\0\1\244\43\0\1\u01b4"+
    "\63\0\1\u01e6\40\0\1\107\66\0\1\u04f2\42\0\1\u04a1"+
    "\47\0\1\u04f3\45\0\1\u04f4\51\0\1\u03f0\61\0\1\u04f5"+
    "\56\0\1\u04f6\61\0\1\u04f7\32\0\1\u04f8\61\0\1\244"+
    "\44\0\1\u02c3\40\0\1\u04f9\1\0\1\u04fa\50\0\1\u04fb"+
    "\55\0\1\u04fc\3\0\1\u040a\42\0\1\u040a\14\0\1\u0105"+
    "\44\0\1\u04fd\45\0\1\u04fe\45\0\1\u04ff\63\0\1\u0500"+
    "\51\0\1\244\35\0\1\u0501\70\0\1\u01e6\46\0\1\u049f"+
    "\32\0\1\u0502\101\0\1\u0503\26\0\1\u041c\63\0\1\u0504"+
    "\35\0\1\u0505\75\0\1\u0506\52\0\1\u0507\35\0\1\u01ab"+
    "\37\0\1\u0267\52\0\1\u0508\55\0\1\u0272\62\0\1\u0509"+
    "\30\0\1\u01c3\51\0\1\u050a\65\0\1\u050b\51\0\1\u050c"+
    "\45\0\1\u050d\47\0\1\u050e\44\0\1\u050f\42\0\1\u0430"+
    "\2\0\3\u0430\1\u04b7\1\u0510\35\u0430\2\0\3\u0430\12\0"+
    "\1\u0511\65\0\1\u0512\31\0\1\u0513\102\0\1\u0514\22\0"+
    "\1\u0515\63\0\1\u0516\47\0\1\u01fe\61\0\1\u049f\44\0"+
    "\1\u0517\43\0\1\u011b\44\0\1\u011b\63\0\1\u02a5\41\0"+
    "\1\u0513\45\0\1\u0518\53\0\1\u024a\41\0\1\322\2\0"+
    "\3\322\1\u0250\7\322\1\u0383\5\322\1\u0519\20\322\2\0"+
    "\4\322\2\0\3\322\1\u0250\15\322\1\u051a\20\322\2\0"+
    "\4\322\2\0\3\322\1\u0250\21\322\1\u051b\14\322\2\0"+
    "\4\322\2\0\3\322\1\u0250\30\322\1\u051c\5\322\2\0"+
    "\3\322\26\0\1\u051d\50\0\1\u02a9\37\0\1\u0476\60\0"+
    "\1\u049f\40\0\1\u04e7\66\0\1\u0153\31\0\1\u051e\52\0"+
    "\1\u02a9\42\0\1\u051f\2\0\42\u051f\2\0\3\u051f\24\0"+
    "\1\u03b9\41\0\1\u0520\44\0\1\u0521\73\0\1\u0522\32\0"+
    "\1\u0523\61\0\1\u0524\45\0\1\u0525\43\0\1\u0526\70\0"+
    "\1\u0527\40\0\1\u01e6\66\0\1\u0377\16\0\1\u04e0\2\0"+
    "\23\u04e0\1\u0528\16\u04e0\2\0\3\u04e0\26\0\1\u0529\60\0"+
    "\1\u052a\26\0\1\u04d1\53\0\1\u052b\45\0\1\u052c\53\0"+
    "\1\u052d\61\0\1\u03a6\47\0\1\u03a6\41\0\1\u011c\55\0"+
    "\1\u04f0\46\0\1\u052e\5\0\1\u052f\46\0\1\u0530\47\0"+
    "\1\u0531\1\0\1\u0532\44\0\1\u0233\56\0\1\u0533\11\0"+
    "\1\u0534\47\0\1\u0535\34\0\1\u0536\62\0\1\u0537\43\0"+
    "\1\u0538\51\0\1\u0539\52\0\1\u053a\44\0\1\u053b\60\0"+
    "\1\u04a1\43\0\1\u053c\56\0\1\u040a\63\0\1\u031f\31\0"+
    "\1\u053d\51\0\1\u03a6\56\0\1\357\61\0\1\u053e\46\0"+
    "\1\u0272\46\0\1\u053f\47\0\1\u0540\71\0\1\u03e6\30\0"+
    "\1\u0541\56\0\1\u0542\52\0\1\u0543\47\0\1\u019b\47\0"+
    "\1\u01b4\66\0\1\u0544\36\0\1\u0499\71\0\1\u01fe\31\0"+
    "\1\u0545\33\0\1\u0430\2\0\3\u0430\1\u04b7\6\u0430\1\u0546"+
    "\27\u0430\2\0\3\u0430\37\0\1\u0547\33\0\1\u0548\52\0"+
    "\1\u03b9\50\0\1\u0549\56\0\1\u054a\56\0\1\u0481\2\0"+
    "\1\u0506\41\0\1\u054b\32\0\1\u0476\42\0\1\322\2\0"+
    "\3\322\1\u0250\1\322\1\u054c\34\322\2\0\4\322\2\0"+
    "\3\322\1\u0250\7\322\1\u054d\26\322\2\0\4\322\2\0"+
    "\3\322\1\u0250\2\322\1\u0383\33\322\2\0\4\322\2\0"+
    "\3\322\1\u054e\36\322\2\0\3\322\23\0\1\u02d4\35\0"+
    "\1\u03f0\42\0\1\u051f\2\0\4\u051f\1\u054f\35\u051f\2\0"+
    "\3\u051f\15\0\1\357\73\0\1\u0550\12\0\1\u0551\2\0"+
    "\42\u0551\2\0\3\u0551\20\0\1\u0552\70\0\1\u027e\30\0"+
    "\1\u01fe\41\0\1\u0553\57\0\1\u031b\35\0\1\u04e0\2\0"+
    "\15\u04e0\1\u0554\5\u04e0\1\u0528\16\u04e0\2\0\3\u04e0\17\0"+
    "\1\u030d\44\0\1\54\52\0\1\u03b9\52\0\1\u0555\74\0"+
    "\1\u0556\32\0\1\u0557\57\0\1\374\53\0\1\u0558\57\0"+
    "\1\u0293\45\0\1\374\55\0\1\u0233\37\0\1\u0559\60\0"+
    "\1\u055a\24\0\1\u055b\71\0\1\u03f0\41\0\1\u055c\41\0"+
    "\1\u0153\71\0\1\u055d\44\0\1\u0352\60\0\1\u04a1\41\0"+
    "\1\u0520\41\0\1\u055e\61\0\1\u055f\57\0\1\u0560\41\0"+
    "\1\u0481\61\0\1\u0561\37\0\1\u0562\35\0\1\u0563\2\0"+
    "\42\u0563\2\0\3\u0563\10\0\1\u0564\54\0\1\u0565\57\0"+
    "\1\372\44\0\1\u0495\55\0\1\u0566\31\0\1\322\2\0"+
    "\3\322\1\u0250\7\322\1\u0567\26\322\2\0\3\322\1\u051f"+
    "\2\0\4\u051f\1\u054f\16\u051f\1\u0568\16\u051f\2\0\3\u051f"+
    "\14\0\1\u0569\35\0\1\u0551\2\0\24\u0551\1\u056a\15\u0551"+
    "\2\0\3\u0551\1\u056b\2\0\42\u056b\2\0\3\u056b\23\0"+
    "\1\u02f7\54\0\1\u056c\51\0\1\u0569\35\0\1\u0233\50\0"+
    "\1\u056d\60\0\1\374\64\0\1\u056e\43\0\1\54\42\0"+
    "\1\u052d\61\0\1\u0146\51\0\1\u056f\35\0\1\u0570\46\0"+
    "\1\u0571\62\0\1\u0473\40\0\1\u0572\42\0\1\u0563\2\0"+
    "\24\u0563\1\u0573\15\u0563\2\0\3\u0563\20\0\1\u0574\57\0"+
    "\1\u0575\35\0\1\u0272\37\0\1\u051f\2\0\4\u051f\1\u054f"+
    "\10\u051f\1\u0576\24\u051f\2\0\3\u051f\33\0\1\u04e7\16\0"+
    "\1\u0551\2\0\21\u0551\1\u0577\2\u0551\1\u056a\15\u0551\2\0"+
    "\3\u0551\1\u056b\2\0\5\u056b\1\u0578\34\u056b\2\0\3\u056b"+
    "\7\0\1\u0579\52\0\1\374\47\0\1\u04ce\66\0\1\u057a"+
    "\43\0\1\374\44\0\1\u057b\71\0\1\u057c\21\0\1\u0563"+
    "\2\0\21\u0563\1\u057d\2\u0563\1\u0573\15\u0563\2\0\3\u0563"+
    "\14\0\1\u057e\57\0\1\u057f\27\0\1\u0551\2\0\5\u0551"+
    "\1\u0580\16\u0551\1\u056a\15\u0551\2\0\3\u0551\1\u056b\2\0"+
    "\5\u056b\1\u0578\1\u0581\33\u056b\2\0\3\u056b\37\0\1\u0582"+
    "\20\0\1\u0305\63\0\1\u0583\75\0\1\u0584\5\0\1\u0563"+
    "\2\0\5\u0563\1\u0585\16\u0563\1\u0573\15\u0563\2\0\3\u0563"+
    "\13\0\1\u0459\60\0\1\u0586\27\0\1\u0551\2\0\24\u0551"+
    "\1\u056a\7\u0551\1\u0587\5\u0551\2\0\3\u0551\1\u056b\2\0"+
    "\3\u056b\1\u0588\1\u056b\1\u0578\34\u056b\2\0\3\u056b\10\0"+
    "\1\u0589\47\0\1\u058a\72\0\1\u058b\22\0\1\u058c\2\0"+
    "\42\u058c\2\0\3\u058c\12\0\1\u058d\37\0\1\u0551\2\0"+
    "\3\u0551\1\u058e\20\u0551\1\u056a\15\u0551\2\0\3\u0551\1\u056b"+
    "\2\0\4\u056b\1\u058f\1\u0578\34\u056b\2\0\3\u056b\26\0"+
    "\1\u0272\43\0\1\u0590\55\0\1\u0591\25\0\1\u058c\2\0"+
    "\3\u058c\1\u0592\36\u058c\2\0\3\u058c\13\0\1\u0162\36\0"+
    "\1\u0551\2\0\17\u0551\1\u0593\4\u0551\1\u056a\15\u0551\2\0"+
    "\3\u0551\31\0\1\u04de\34\0\1\u0594\35\0\1\u058c\2\0"+
    "\3\u058c\1\u0592\7\u058c\1\u0595\26\u058c\2\0\3\u058c\1\u0551"+
    "\2\0\13\u0551\1\u0596\10\u0551\1\u056a\15\u0551\2\0\3\u0551"+
    "\22\0\1\u0118\27\0\1\u058c\2\0\3\u058c\1\u0592\30\u058c"+
    "\1\u0597\5\u058c\2\0\3\u058c\1\u0551\2\0\23\u0551\1\u0598"+
    "\1\u056a\15\u0551\2\0\3\u0551\1\u058c\2\0\3\u058c\1\u0592"+
    "\10\u058c\1\u0599\25\u058c\2\0\4\u058c\2\0\3\u058c\1\u0592"+
    "\3\u058c\1\u059a\32\u058c\2\0\4\u058c\2\0\3\u058c\1\u0592"+
    "\13\u058c\1\u059b\22\u058c\2\0\4\u058c\2\0\3\u058c\1\u0592"+
    "\13\u058c\1\u059c\22\u058c\2\0\3\u058c";

  private static int [] zzUnpackTrans() {
    int [] result = new int[56868];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\2\11\31\1\1\11\2\1\2\11"+
    "\2\1\3\0\1\1\4\0\1\1\17\0\1\1\1\0"+
    "\1\1\26\0\2\1\1\0\1\1\6\0\1\1\22\0"+
    "\1\1\27\0\1\1\3\0\1\1\1\0\1\1\1\0"+
    "\1\1\5\0\1\1\4\0\1\1\4\0\1\11\1\1"+
    "\2\0\1\1\5\0\1\11\5\0\1\1\23\0\1\1"+
    "\1\0\1\11\1\0\1\11\14\0\1\11\21\0\1\11"+
    "\3\0\1\11\1\0\1\1\3\0\1\1\3\0\1\1"+
    "\2\0\1\11\10\0\1\11\1\0\2\11\2\0\1\1"+
    "\1\0\1\11\1\1\1\11\2\0\1\1\3\0\1\1"+
    "\21\0\1\1\23\0\1\1\15\0\1\1\13\0\1\11"+
    "\5\0\1\11\10\0\1\11\14\0\1\1\5\0\1\1"+
    "\1\0\1\1\5\0\1\1\23\0\1\1\4\0\1\1"+
    "\1\11\5\0\1\1\10\0\1\1\12\0\1\11\3\0"+
    "\1\1\14\0\1\1\22\0\1\1\15\0\1\11\10\0"+
    "\1\1\11\0\1\1\2\0\1\1\5\0\2\1\5\0"+
    "\1\1\10\0\1\1\25\0\1\1\22\0\1\1\53\0"+
    "\1\11\3\0\1\1\4\0\3\11\2\0\1\1\1\11"+
    "\3\0\1\1\10\0\1\1\22\0\1\1\2\0\1\1"+
    "\5\0\1\1\25\0\2\1\14\0\1\11\16\0\1\11"+
    "\1\0\1\11\16\0\1\1\13\0\1\1\13\0\1\11"+
    "\1\1\1\11\27\0\1\1\1\0\1\1\15\0\1\1"+
    "\2\0\1\1\5\0\1\1\15\0\2\1\3\0\1\1"+
    "\10\0\1\1\13\0\1\1\17\0\1\1\1\0\1\1"+
    "\1\0\1\1\11\0\1\1\16\0\1\1\5\0\1\1"+
    "\12\0\1\11\3\0\1\11\7\0\1\1\22\0\1\1"+
    "\15\0\1\1\27\0\2\1\13\0\1\11\1\0\1\1"+
    "\3\0\1\1\27\0\1\1\65\0\1\1\106\0\1\11"+
    "\37\0\1\11\10\0\1\1\27\0\1\1\33\0\1\11"+
    "\10\0\1\11\3\0\1\1\31\0\1\11\2\0\1\1"+
    "\75\0\1\1\3\0\1\11\1\0\2\1\6\0\1\1"+
    "\22\0\1\1\16\0\1\1\30\0\1\1\10\0\1\1"+
    "\3\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1436];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    /*  Generamos un java_cup.Symbol para guardar el tipo de token 
        encontrado */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    
    /* Generamos un Symbol para el tipo de token encontrado 
       junto con su valor */
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalizadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  AnalizadorLexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 128) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { System.out.println("Caracter ilegal <"+yytext()+">");
          }
        case 49: break;
        case 2: 
          { /* ignora el espacio */
          }
        case 50: break;
        case 3: 
          { System.out.print(yytext()); 
                      return symbol(sym.ENTERO, new Integer(yytext()));
          }
        case 51: break;
        case 4: 
          { System.out.println("ART_INDEFI"); return symbol(sym.ART_INDEFI);
          }
        case 52: break;
        case 5: 
          { System.out.println("ADJ_POSESIV"); return symbol(sym.ADJ_POSESIV);
          }
        case 53: break;
        case 6: 
          { System.out.println("SIG_PUNT"); return symbol(sym.SIG_PUNT);
          }
        case 54: break;
        case 7: 
          { System.out.println("INTERRO"); return symbol(sym.INTERRO);
          }
        case 55: break;
        case 8: 
          { System.out.print(" + ");
                          return symbol(sym.OP_SUMA);
          }
        case 56: break;
        case 9: 
          { System.out.println("PREP_LUG"); return symbol(sym.PREP_LUG);
          }
        case 57: break;
        case 10: 
          { System.out.println("CONJ_SUBORCAUS"); return symbol(sym.CONJ_SUBORCAUS);
          }
        case 58: break;
        case 11: 
          { System.out.println("AUX_PRESEN"); return symbol(sym.AUX_PRESEN);
          }
        case 59: break;
        case 12: 
          { System.out.println("PREP_MOV"); return symbol(sym.PREP_MOV);
          }
        case 60: break;
        case 13: 
          { System.out.println("ADJ_PROPERSO"); return symbol(sym.ADJ_PROPERSO);
          }
        case 61: break;
        case 14: 
          { System.out.println("PREP_MOD"); return symbol(sym.PREP_MOD);
          }
        case 62: break;
        case 15: 
          { System.out.println("AUXPRESP"); return symbol(sym.AUXPRESP);
          }
        case 63: break;
        case 16: 
          { System.out.println("CONJ_COORDISYU"); return symbol(sym.CONJ_COORDISYU);
          }
        case 64: break;
        case 17: 
          { System.out.println("ANIMALS"); return symbol(sym.ANIMALS);
          }
        case 65: break;
        case 18: 
          { System.out.println("VERBO_PRESENT"); return symbol(sym.VERBO_PRESENT);
          }
        case 66: break;
        case 19: 
          { System.out.println("CONJ_COORCOPU"); return symbol(sym.CONJ_COORCOPU);
          }
        case 67: break;
        case 20: 
          { System.out.println("VERBO_PASADOSIMP"); return symbol(sym.VERBO_PASADOSIMP);
          }
        case 68: break;
        case 21: 
          { System.out.println("ADJ_CALIFI"); return symbol(sym.ADJ_CALIFI);
          }
        case 69: break;
        case 22: 
          { System.out.println("PROF"); return symbol(sym.PROF);
          }
        case 70: break;
        case 23: 
          { System.out.println("NO"); return symbol(sym.NO);
          }
        case 71: break;
        case 24: 
          { System.out.println("ART_DEFI"); return symbol(sym.ART_DEFI);
          }
        case 72: break;
        case 25: 
          { System.out.println("ADJ_NUMCARDIN"); return symbol(sym.ADJ_NUMCARDIN);
          }
        case 73: break;
        case 26: 
          { System.out.println("SUS_COMUN"); return symbol(sym.SUS_COMUN);
          }
        case 74: break;
        case 27: 
          { System.out.println("AUXPASPP"); return symbol(sym.AUXPASPP);
          }
        case 75: break;
        case 28: 
          { System.out.println("AUXPPS"); return symbol(sym.AUXPPS);
          }
        case 76: break;
        case 29: 
          { System.out.println("ADJ_PROPOSESIV"); return symbol(sym.ADJ_PROPOSESIV);
          }
        case 77: break;
        case 30: 
          { System.out.println("ADJ_PROINTERR"); return symbol(sym.ADJ_PROINTERR);
          }
        case 78: break;
        case 31: 
          { System.out.println("AUXPASP"); return symbol(sym.AUXPASP);
          }
        case 79: break;
        case 32: 
          { System.out.println("WEATH"); return symbol(sym.WEATH);
          }
        case 80: break;
        case 33: 
          { System.out.println("VERBO_PASADOPARTICI"); return symbol(sym.VERBO_PASADOPARTICI);
          }
        case 81: break;
        case 34: 
          { System.out.println("AUX_PAS"); return symbol(sym.AUX_PAS);
          }
        case 82: break;
        case 35: 
          { System.out.println("VEGET"); return symbol(sym.VEGET);
          }
        case 83: break;
        case 36: 
          { System.out.println("PAIS"); return symbol(sym.PAIS);
          }
        case 84: break;
        case 37: 
          { System.out.println("CONJ_COORADVERV"); return symbol(sym.CONJ_COORADVERV);
          }
        case 85: break;
        case 38: 
          { System.out.println("CONJ_CONJSUBOCOMPARA"); return symbol(sym.CONJ_CONJSUBOCOMPARA);
          }
        case 86: break;
        case 39: 
          { System.out.println("ADJ_DEMOS"); return symbol(sym.ADJ_DEMOS);
          }
        case 87: break;
        case 40: 
          { System.out.println("CONJ_CONJSUBOCONSEC"); return symbol(sym.CONJ_CONJSUBOCONSEC);
          }
        case 88: break;
        case 41: 
          { System.out.println("CONJ_CONJSUBOCONCES"); return symbol(sym.CONJ_CONJSUBOCONCES);
          }
        case 89: break;
        case 42: 
          { System.out.println("SUS_ABSTRACT"); return symbol(sym.SUS_ABSTRACT);
          }
        case 90: break;
        case 43: 
          { System.out.println("WILL"); return symbol(sym.WILL);
          }
        case 91: break;
        case 44: 
          { System.out.println("PREP_TIEM"); return symbol(sym.PREP_TIEM);
          }
        case 92: break;
        case 45: 
          { System.out.println("ADJ_NUMORD"); return symbol(sym.ADJ_NUMORD);
          }
        case 93: break;
        case 46: 
          { System.out.println("ADJ_PROREFLEX"); return symbol(sym.ADJ_PROREFLEX);
          }
        case 94: break;
        case 47: 
          { System.out.println("CONJ_SUBORDISYU"); return symbol(sym.CONJ_SUBORDISYU);
          }
        case 95: break;
        case 48: 
          { System.out.println("GOING"); return symbol(sym.GOING);
          }
        case 96: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
